<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大卫吕的技术博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://daweilv.com/"/>
  <updated>2019-09-16T08:47:58.741Z</updated>
  <id>https://daweilv.com/</id>
  
  <author>
    <name>David</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实现一个 react-router</title>
    <link href="https://daweilv.com/2019/09/13/build-your-own-react-router/"/>
    <id>https://daweilv.com/2019/09/13/build-your-own-react-router/</id>
    <published>2019-09-13T15:26:49.000Z</published>
    <updated>2019-09-16T08:47:58.741Z</updated>
    
    <content type="html"><![CDATA[<p>本文将用尽可能容易理解的方式，实现最小可用的 <a href="https://github.com/ReactTraining/react-router" target="_blank" rel="noopener">react-router v4</a> 和 <a href="https://github.com/ReactTraining/history" target="_blank" rel="noopener">history</a>，目的为了了解 react-router 实现原理。</p><a id="more"></a><h2 id="一、开始之前"><a href="#一、开始之前" class="headerlink" title="一、开始之前"></a>一、开始之前</h2><p>在开始阅读本文之前，希望你至少使用过一次 react-router，知道 react-router 的基本使用方法。</p><h2 id="二、已实现的功能"><a href="#二、已实现的功能" class="headerlink" title="二、已实现的功能"></a>二、已实现的功能</h2><ul><li>根据当前页面的 location.pathname，渲染对应 Route 中的 component</li><li>点击 Link，页面无刷新，pathname 更新，渲染对应 Route 中的 component</li><li>浏览器后退/前进，页面无刷新，渲染对应 Route 中的 component</li></ul><h2 id="三、Github-地址与在线预览"><a href="#三、Github-地址与在线预览" class="headerlink" title="三、Github 地址与在线预览"></a>三、Github 地址与在线预览</h2><ul><li>GitHub 地址 <a href="https://github.com/build-your-own-tutorial/build-your-own-react-router" target="_blank" rel="noopener">build-your-own-react-router</a></li><li>在线预览 <a href="https://codesandbox.io/s/great-moon-09fn6" target="_blank" rel="noopener">codesandbox</a></li></ul><h2 id="四、原理分析"><a href="#四、原理分析" class="headerlink" title="四、原理分析"></a>四、原理分析</h2><h3 id="1-Route-的实现"><a href="#1-Route-的实现" class="headerlink" title="1. Route 的实现"></a>1. Route 的实现</h3><p>先来看一段代码，我们需要实现的逻辑是：当 <code>location.pathname = &#39;/&#39;</code> 时，页面渲染 Index 组件，当 <code>location.path = &#39;/about/&#39;</code> 时，页面渲染 About 组件。</p><figure class="highlight jsx hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; BrowserRouter <span class="hljs-keyword">as</span> Router, Route, Link &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"./react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span>(<span class="hljs-params">props</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Index props'</span>, props);</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">About</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>About<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Users</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Users<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;nav&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">              &lt;Link to=<span class="hljs-string">"/"</span>&gt;Home&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">            &lt;/</span>li&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">              &lt;Link to=<span class="hljs-string">"/about/"</span>&gt;About&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">            &lt;/</span>li&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">              &lt;Link to=<span class="hljs-string">"/users/"</span>&gt;Users&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">            &lt;/</span>li&gt;</span><br><span class="line">          &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;/</span>nav&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Route path=<span class="hljs-string">"/"</span> exact component=&#123;Index&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="hljs-string">"/about/"</span> component=&#123;About&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="hljs-string">"/users/"</span> component=&#123;Users&#125; /&gt;</span><br><span class="line">      &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>Router&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>其实，Route 组件内部的核心逻辑就是判断当前 pathname 是否与自身 props 上的 path 相等，如果相等，则渲染自身 props 上的 component，不等的时候不渲染，返回 null。</p><p>好，来看下 Route 的实现：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; RouterContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./BrowserRouter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Route</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> &#123; path, component &#125; = <span class="hljs-keyword">this</span>.props;</span><br><span class="line">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.context.location.pathname !== path) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span> React.createElement(component, &#123; ...this.context &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Route.contextType = RouterContext</span><br></pre></td></tr></table></figure><p>Route 主要就是一个 render() 函数，内部通过 <a href="https://reactjs.org/docs/context.html#classcontexttype" target="_blank" rel="noopener">context</a> 获得当前 pathname。那么这个 context 是哪来的呢？</p><h3 id="2-BrowserRouter-的实现"><a href="#2-BrowserRouter-的实现" class="headerlink" title="2. BrowserRouter 的实现"></a>2. BrowserRouter 的实现</h3><figure class="highlight jsx hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; createBrowserHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'../history'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> history = createBrowserHistory()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> RouterContext = React.createContext(history)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BrowserRouter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>(props)</span><br><span class="line">        <span class="hljs-keyword">this</span>.state = &#123;</span><br><span class="line">            location: &#123;</span><br><span class="line">                pathname: <span class="hljs-built_in">window</span>.location.pathname</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> &#123; location &#125; = <span class="hljs-keyword">this</span>.state;</span><br><span class="line">        <span class="hljs-keyword">return</span> (</span><br><span class="line">            &lt;RouterContext.Provider value=&#123;&#123; history, location &#125;&#125;&gt;</span><br><span class="line">                &#123;<span class="hljs-keyword">this</span>.props.children&#125;</span><br><span class="line">            &lt;<span class="hljs-regexp">/RouterContext.Provider&gt;</span></span><br><span class="line"><span class="hljs-regexp">        )</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p>这里仅贴出了首次渲染的逻辑代码。BrowserRouter 在 constructor 中根据 window.location 初始化 location，然后将 location 传入 RouterContext.Provider 组件，子组件 Route 接收到含有 location 的 context，根据 <code>1. Route 的实现</code> 完成首次渲染。</p><p>注意到传入 RouterContext.Provider 组件的对象不光有 location，还有 history 对象。这个 history 是做什么用的呢？其实是暴露 history.push 和 history.listen 方法，提供给外部做跳转和监听跳转事件使用的。Link 组件的实现也是用到了 history，我们接着往下看。</p><h3 id="3-Link-的实现"><a href="#3-Link-的实现" class="headerlink" title="3. Link 的实现"></a>3. Link 的实现</h3><figure class="highlight jsx hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; RouterContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./BrowserRouter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Link</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>(props)</span><br><span class="line">        <span class="hljs-keyword">this</span>.clickHandler = <span class="hljs-keyword">this</span>.clickHandler.bind(<span class="hljs-keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clickHandler(e) &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'click'</span>, <span class="hljs-keyword">this</span>.props.to);</span><br><span class="line">        e.preventDefault()</span><br><span class="line">        <span class="hljs-keyword">this</span>.context.history.push(<span class="hljs-keyword">this</span>.props.to)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> &#123; to, children &#125; = <span class="hljs-keyword">this</span>.props;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#123;to&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.clickHandler&#125;</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Link.contextType = RouterContext</span><br></pre></td></tr></table></figure><p>Link 组件其实就是一个 a 标签，与普通 a 标签不同，点击 Link 组件并不会刷新整个页面。组件内部把 a 标签的默认行为 preventDefault 了，Link 组件从 context 上拿到 history，将需要跳转的动作告诉 history，即 <code>history.push(to)</code>。</p><p>如下面代码所示，BrowserRouter 在 componentDidMount 中，通过 history.listen 监听 location 的变化。当 location 变化的时候，setState 一个新的 location 对象，触发 render，进而触发子组件 Route 的重新渲染，渲染出对应 Route。</p><figure class="highlight jsx hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// BrowserRouter</span></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">    history.listen(<span class="hljs-function">(<span class="hljs-params">pathname</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'history change'</span>, pathname);</span><br><span class="line">        <span class="hljs-keyword">this</span>.setState(&#123; <span class="hljs-attr">location</span>: &#123; pathname &#125; &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-history-的实现"><a href="#4-history-的实现" class="headerlink" title="4. history 的实现"></a>4. history 的实现</h3><p>history 的内部实现是怎么样的呢？请看下面的代码：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> globalHistory = <span class="hljs-built_in">window</span>.history;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createBrowserHistory</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> listeners = []</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> push = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">pathname</span>) </span>&#123;</span><br><span class="line">        globalHistory.pushState(&#123;&#125;, <span class="hljs-string">''</span>, pathname)</span><br><span class="line">        notifyListeners(pathname)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> listen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">listener</span>) </span>&#123;</span><br><span class="line">        listeners.push(listener)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> notifyListeners = <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        listeners.forEach(<span class="hljs-function"><span class="hljs-params">listener</span> =&gt;</span> listener(...args))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">window</span>.onpopstate = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        notifyListeners(<span class="hljs-built_in">window</span>.location.pathname)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">        listeners,</span><br><span class="line">        listen,</span><br><span class="line">        push</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>history 通过 listen 方法收集外部的监听事件。当外部调用 history.push 方法时，使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API" target="_blank" rel="noopener">window.history.pushState</a> 修改当前 location，执行 notifyListeners 方法，依次回调所有的监听事件。注：这里为了让代码更加容易理解，简化了 listener this 上下文的处理。</p><p>另外，history 内部增加了 window.onpopstate 用来监听浏览器的前进后退事件，执行 notifyListeners 方法。</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>我们使用了 100 多行代码，实现了 react-router 的基本功能，对 react-router 有了更深入的认识。想更加深入的了解 react-router，建议看一下 react-router 的源码，快速走读一遍，再对比下本文的实现细节，相信你会有一个更清晰的理解。</p><p>觉得本文帮助到你的话，请给我的 <a href="https://github.com/build-your-own-tutorial/build-your-own-react-router" target="_blank" rel="noopener">build-your-own-react-router</a> 项目点个⭐️吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将用尽可能容易理解的方式，实现最小可用的 &lt;a href=&quot;https://github.com/ReactTraining/react-router&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-router v4&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ReactTraining/history&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;history&lt;/a&gt;，目的为了了解 react-router 实现原理。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://daweilv.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://daweilv.com/tags/React/"/>
    
      <category term="build your own" scheme="https://daweilv.com/tags/build-your-own/"/>
    
      <category term="react-router" scheme="https://daweilv.com/tags/react-router/"/>
    
  </entry>
  
  <entry>
    <title>bind 实现</title>
    <link href="https://daweilv.com/2019/09/05/build-your-own-bind/"/>
    <id>https://daweilv.com/2019/09/05/build-your-own-bind/</id>
    <published>2019-09-05T02:07:42.000Z</published>
    <updated>2019-09-16T08:47:58.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind</a><br><a href="https://github.com/Raynos/function-bind/blob/master/implementation.js" target="_blank" rel="noopener">https://github.com/Raynos/function-bind/blob/master/implementation.js</a></p><h2 id="简易实现"><a href="#简易实现" class="headerlink" title="简易实现"></a>简易实现</h2><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Does not work with `new funcA.bind(thisArg, args)`</span></span><br><span class="line"><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Function</span>.prototype.bind) (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">  <span class="hljs-comment">// Is this an error? We are invoking &lt;call.bind&gt; method before it's defined.</span></span><br><span class="line">  <span class="hljs-keyword">var</span> slice = <span class="hljs-built_in">Array</span>.prototype.slice.call.bind(<span class="hljs-built_in">Array</span>.prototype.slice);</span><br><span class="line">  <span class="hljs-built_in">Function</span>.prototype.bind = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> thatFunc = <span class="hljs-keyword">this</span>, thatArg = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>];</span><br><span class="line">    <span class="hljs-keyword">var</span> args = slice(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> thatFunc !== <span class="hljs-string">'function'</span>) &#123;</span><br><span class="line">      <span class="hljs-comment">// closest thing possible to the ECMAScript 5</span></span><br><span class="line">      <span class="hljs-comment">// internal IsCallable function</span></span><br><span class="line">      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">'Function.prototype.bind - '</span> +</span><br><span class="line">             <span class="hljs-string">'what is trying to be bound is not callable'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">      <span class="hljs-keyword">var</span> funcArgs = args.concat(slice(<span class="hljs-built_in">arguments</span>))</span><br><span class="line">      <span class="hljs-keyword">return</span> thatFunc.apply(thatArg, funcArgs);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="复杂实现"><a href="#复杂实现" class="headerlink" title="复杂实现"></a>复杂实现</h2><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Yes, it does work with `new funcA.bind(thisArg, args)`</span></span><br><span class="line"><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Function</span>.prototype.bind) (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> ArrayPrototypeSlice = <span class="hljs-built_in">Array</span>.prototype.slice;</span><br><span class="line">  <span class="hljs-built_in">Function</span>.prototype.bind = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">otherThis</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-keyword">this</span> !== <span class="hljs-string">'function'</span>) &#123;</span><br><span class="line">      <span class="hljs-comment">// closest thing possible to the ECMAScript 5</span></span><br><span class="line">      <span class="hljs-comment">// internal IsCallable function</span></span><br><span class="line">      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">'Function.prototype.bind - what is trying to be bound is not callable'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">var</span> baseArgs= ArrayPrototypeSlice .call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">1</span>),</span><br><span class="line">        baseArgsLength = baseArgs.length,</span><br><span class="line">        fToBind = <span class="hljs-keyword">this</span>,</span><br><span class="line">        fNOP    = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;,</span><br><span class="line">        fBound  = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">          baseArgs.length = baseArgsLength; <span class="hljs-comment">// reset to default base arguments</span></span><br><span class="line">          baseArgs.push.apply(baseArgs, <span class="hljs-built_in">arguments</span>);</span><br><span class="line">          <span class="hljs-keyword">return</span> fToBind.apply(</span><br><span class="line">                 fNOP.prototype.isPrototypeOf(<span class="hljs-keyword">this</span>) ? <span class="hljs-keyword">this</span> : otherThis, baseArgs</span><br><span class="line">          );</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.prototype) &#123;</span><br><span class="line">      <span class="hljs-comment">// Function.prototype doesn't have a prototype property</span></span><br><span class="line">      fNOP.prototype = <span class="hljs-keyword">this</span>.prototype; </span><br><span class="line">    &#125;</span><br><span class="line">    fBound.prototype = <span class="hljs-keyword">new</span> fNOP();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> fBound;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="参考实现"><a href="#参考实现" class="headerlink" title="参考实现"></a>参考实现</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Refer
      
    
    </summary>
    
      <category term="前端" scheme="https://daweilv.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="build your own" scheme="https://daweilv.com/tags/build-your-own/"/>
    
      <category term="bind" scheme="https://daweilv.com/tags/bind/"/>
    
  </entry>
  
  <entry>
    <title>eventloop</title>
    <link href="https://daweilv.com/2019/09/05/event-loop-intro/"/>
    <id>https://daweilv.com/2019/09/05/event-loop-intro/</id>
    <published>2019-09-04T17:09:42.000Z</published>
    <updated>2019-09-16T08:47:58.709Z</updated>
    
    <content type="html"><![CDATA[<p>macrotasks: setTimeout, setInterval, setImmediate, I/O, UI rendering<br>microtasks: process.nextTick, Promises, Object.observe(废弃), MutationObserver</p><p>promise/a+ 规范 <a href="https://promisesaplus.com/#notes" target="_blank" rel="noopener">https://promisesaplus.com/#notes</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;macrotasks: setTimeout, setInterval, setImmediate, I/O, UI rendering&lt;br&gt;microtasks: process.nextTick, Promises, Object.observe(废弃), Mutat
      
    
    </summary>
    
      <category term="前端" scheme="https://daweilv.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="event loop" scheme="https://daweilv.com/tags/event-loop/"/>
    
  </entry>
  
  <entry>
    <title>从零实现一个 JS 模块打包器</title>
    <link href="https://daweilv.com/2019/08/20/build-your-own-js-packer/"/>
    <id>https://daweilv.com/2019/08/20/build-your-own-js-packer/</id>
    <published>2019-08-20T09:28:47.000Z</published>
    <updated>2019-09-16T09:47:45.514Z</updated>
    
    <content type="html"><![CDATA[<p>2019 年的前端技术栈，无论你是用 Vue 还是用 React ，应该都离不开一样工具 – webpack。webpack 极大的简化了前端开发的构建过程，只需提供一个入口文件，webpack 就能自动帮我们分析出相关依赖，构建出 bundle 包。</p><p>webpack 很强大，但是大家知道 webpack 到底是怎么样打包的吗？本文将从一个很简单的例子，一步步带领大家探寻 webpack 打包的基本原理。</p><a id="more"></a><h2 id="一、准备阶段"><a href="#一、准备阶段" class="headerlink" title="一、准备阶段"></a>一、准备阶段</h2><blockquote><p>本文的代码详见<a href="https://github.com/daweilv/webpack-mini/tree/step1" target="_blank" rel="noopener">webpack-mini step1</a>。<br>在本文中，我们不考虑任何优化操作，尽可能的保持代码最简单。</p></blockquote><p>假设我们的项目目录及文件列表如下，我们将使用命令 <code>node webpack-mini/index.js</code> 把 <code>src</code> 下的代码打包成一个 <code>bundle.js</code> 。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── dist             // 打包出来 bundle 文件所在目录</span><br><span class="line">│   ├── bundle.js</span><br><span class="line">├── src              // 业务代码目录</span><br><span class="line">│   ├── bar.js</span><br><span class="line">│   ├── foo.js</span><br><span class="line">│   └── index.js     // 入口文件</span><br><span class="line">└── webpack-mini     // mini 打包器代码目录</span><br><span class="line">    └── index.js</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// src/index.js</span></span><br><span class="line"><span class="hljs-keyword">import</span> foo <span class="hljs-keyword">from</span> <span class="hljs-string">'./foo.js'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; say &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./bar.js'</span>;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line">say();</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// src/foo.js</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'foo: Hello I am foo!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// src/bar.js</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'bar.say: Hello I am bar!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、分析结构"><a href="#二、分析结构" class="headerlink" title="二、分析结构"></a>二、分析结构</h2><p>先来看入口文件， <code>src/index.js</code> 通过 ES6 的 import 语法引入了 foo 的 default 方法和 bar 的 say 方法。</p><p>如何解析 index.js 、foo.js、bar.js 之间的依赖关系呢？字符串查找？不行，这样要考虑的边界情况太多。正则？也不行，同样很复杂。那么正统的处理方式是什么？语法解析。</p><p>在这个 DEMO 中，我们使用 <code>babel</code> 来解析 JS 文件，生成抽象语法树。先看下 src/index.js 中的 <code>import foo from &#39;./foo&#39;;</code> 通过在线语法解析网站 <a href="https://astexplorer.net" target="_blank" rel="noopener">axtexplorer.net</a> 生成的 json 结构（省略了部分无关节点信息）。</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"type"</span>: <span class="hljs-string">"File"</span>,</span><br><span class="line">  <span class="hljs-attr">"start"</span>: <span class="hljs-number">0</span>,</span><br><span class="line">  <span class="hljs-attr">"end"</span>: <span class="hljs-number">24</span>,</span><br><span class="line">  <span class="hljs-attr">"loc"</span>: &#123;&#125;,</span><br><span class="line">  <span class="hljs-attr">"program"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"type"</span>: <span class="hljs-string">"Program"</span>,</span><br><span class="line">    <span class="hljs-attr">"start"</span>: <span class="hljs-number">0</span>,</span><br><span class="line">    <span class="hljs-attr">"end"</span>: <span class="hljs-number">24</span>,</span><br><span class="line">    <span class="hljs-attr">"loc"</span>: &#123;&#125;,</span><br><span class="line">    <span class="hljs-attr">"sourceType"</span>: <span class="hljs-string">"module"</span>,</span><br><span class="line">    <span class="hljs-attr">"body"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        "type": "ImportDeclaration",             // 划重点</span><br><span class="line">        "start": 0,</span><br><span class="line">        "end": 24,</span><br><span class="line">        "loc": &#123;&#125;,</span><br><span class="line">        "specifiers": [</span><br><span class="line">          &#123;</span><br><span class="line">            "type": "ImportDefaultSpecifier",    // 划重点</span><br><span class="line">            "start": 7,</span><br><span class="line">            "end": 10,</span><br><span class="line">            "loc": &#123;&#125;,</span><br><span class="line">            "local": &#123;</span><br><span class="line">              "type": "Identifier",</span><br><span class="line">              "start": 7,</span><br><span class="line">              "end": 10,</span><br><span class="line">              "loc": &#123;&#125;,</span><br><span class="line">              "name": "foo"</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        "importKind": "value",</span><br><span class="line">        "source": &#123;</span><br><span class="line">          "type": "Literal",</span><br><span class="line">          "start": 16,</span><br><span class="line">          "end": 23,</span><br><span class="line">          "loc": &#123;&#125;,</span><br><span class="line">          "value": "./foo",                      // 划重点</span><br><span class="line">          "rawValue": "./foo",</span><br><span class="line">          "raw": "'./foo'"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  "comments": [],</span><br><span class="line">  "tokens": []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的解析工具识别出了这是一个 import 声明（ImportDeclaration），并且是一个默认的声明（ImportDefaultSpecifier），声明标识符（Identifier）为 foo，引用的资源路径为 ./foo。解析工具帮我们把字符串代码转换为了结构化的对象，有了结构化的对象，我们就能进行下一步了。</p><h2 id="三、生成依赖图"><a href="#三、生成依赖图" class="headerlink" title="三、生成依赖图"></a>三、生成依赖图</h2><p><img src="./dependencies.svg" alt="依赖解析"></p><p>想要打包 JS 模块，先要拿到 JS 的依赖<a href="https://en.wikipedia.org/wiki/Graph_%28abstract_data_type%29" target="_blank" rel="noopener">图</a>，上图就是生成依赖图的流程图。下面我们看下具体代码实现：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> &#123; transformFileSync &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'@babel/core'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 读取资源文件，修改 import 语句，ES6 import/export 语法转换成 require/exports 的形式，并生成依赖图</span></span><br><span class="line"><span class="hljs-comment"> * @param &#123;string&#125; filePath - 资源文件路径</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createGraph</span>(<span class="hljs-params">filePath</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (!path.isAbsolute(filePath)) filePath = path.resolve(__dirname, filePath);</span><br><span class="line">    <span class="hljs-keyword">const</span> dirPath = path.dirname(filePath);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> dependencies = [];</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> visitor = &#123;</span><br><span class="line">        <span class="hljs-comment">// 我们要修改的节点是 import 声明节点。</span></span><br><span class="line">        ImportDeclaration(&#123; node &#125;) &#123;</span><br><span class="line">            <span class="hljs-comment">// 递归遍历 import 引用的资源文件，将相对路径转换为绝对路径，作为对应模块的 key</span></span><br><span class="line">            node.source.value = path.resolve(dirPath, node.source.value);</span><br><span class="line">            dependencies.push(createGraph(node.source.value))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> &#123; code &#125; = transformFileSync(filePath, &#123;</span><br><span class="line">        presets: [<span class="hljs-string">'@babel/env'</span>],</span><br><span class="line">        plugins: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-comment">// babel 提供的访问者模式，详细解释可参考下文</span></span><br><span class="line">                <span class="hljs-comment">// https://daweilv.com/2018/07/21/教练我想写一个-helloworld-Babel-插件/</span></span><br><span class="line">                visitor</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">        filePath,</span><br><span class="line">        code,</span><br><span class="line">        dependencies</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要说明的一点是，由于 ES6 import 的语法支持程度还很低，并且需要特殊的加载方式（ <code>&lt;script type=&quot;module&quot;&gt;</code> ），另外，我们后面还要兼容 commonjs 的 module.exports/exports 语法，所以我们需要用 <code>@babel/env</code> 转换一下代码。分别看下 <code>src/index.js</code> 和 <code>src/foo.js</code> 转换后的样子，下一步我们将使用转换后的代码，在 exports 上做文章。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// src/index.js</span></span><br><span class="line"><span class="hljs-meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> _foo = _interopRequireDefault(<span class="hljs-built_in">require</span>(<span class="hljs-string">"/Users/david/project/webpack-mini/src/foo.js"</span>));</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> _bar = <span class="hljs-built_in">require</span>(<span class="hljs-string">"/Users/david/project/webpack-mini/src/bar.js"</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 这个方法是为了统一 commonjs 和 es module 的 default 语法</span></span><br><span class="line"><span class="hljs-comment">// Modules in Common JS :</span></span><br><span class="line"><span class="hljs-comment">// module.exports = function () &#123;&#125;;</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// Modules in ES6 :</span></span><br><span class="line"><span class="hljs-comment">// export default function () &#123;&#125;</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> _interopRequireDefault(<span class="hljs-params">obj</span>) </span>&#123; <span class="hljs-keyword">return</span> obj &amp;&amp; obj.__esModule ? obj : &#123; <span class="hljs-string">"default"</span>: obj &#125;; &#125;</span><br><span class="line"></span><br><span class="line">(<span class="hljs-number">0</span>, _foo[<span class="hljs-string">"default"</span>])();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 这种语法与 Object(_bar.say)() 实现效果相同，使得 _bar.say 作为函数调用</span></span><br><span class="line"><span class="hljs-comment">// 而不是作为 _bar 的 say 方法，这与 es6 module 的 export 行为一致</span></span><br><span class="line">(<span class="hljs-number">0</span>, _bar.say)();</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// src/foo.js</span></span><br><span class="line"><span class="hljs-meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">Object</span>.defineProperty(exports, <span class="hljs-string">"__esModule"</span>, &#123;</span><br><span class="line">    value: <span class="hljs-literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// export default function () &#123;&#125;</span></span><br><span class="line"><span class="hljs-comment">// default function 被挂载到了 exports 上</span></span><br><span class="line">exports[<span class="hljs-string">"default"</span>] = _default;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> _default(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'foo: Hello I am foo!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、生成-bundle-文件"><a href="#四、生成-bundle-文件" class="headerlink" title="四、生成 bundle 文件"></a>四、生成 bundle 文件</h2><p>拿到依赖图后，我们就要开始组装 bundle 包了。</p><p>先遍历一遍依赖图，将依赖图转为数组，方便下一步生成入口文件的时候使用。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 递归遍历，将依赖图展开成平级的数组</span></span><br><span class="line"><span class="hljs-comment"> * @param &#123;object&#125; graph - 依赖图</span></span><br><span class="line"><span class="hljs-comment"> * @param &#123;array&#125; modules - 展开后的数组</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flattenGraph</span>(<span class="hljs-params">graph, modules</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (!modules) modules = [];</span><br><span class="line">    <span class="hljs-comment">// 这里将文件的绝对路径作为 module 的id</span></span><br><span class="line">    modules.push(&#123; <span class="hljs-attr">id</span>: graph.filePath, <span class="hljs-attr">code</span>: graph.code &#125;)</span><br><span class="line">    <span class="hljs-keyword">if</span> (graph.dependencies.length) &#123;</span><br><span class="line">        graph.dependencies.forEach(<span class="hljs-function"><span class="hljs-params">o</span> =&gt;</span> &#123;</span><br><span class="line">            flattenGraph(o, modules)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> modules</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到模块数组后，开始拼接代码块。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 生成入口文件，拼接模块数组</span></span><br><span class="line"><span class="hljs-comment"> * @param &#123;array&#125; modules 模块数组</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createBundle</span>(<span class="hljs-params">modules</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">`(function (modules) &#123;</span></span><br><span class="line"><span class="hljs-string">    function require(moduleId) &#123;</span></span><br><span class="line"><span class="hljs-string">        let exports = &#123;&#125;;</span></span><br><span class="line"><span class="hljs-string">        modules[moduleId](exports, require);</span></span><br><span class="line"><span class="hljs-string">        return exports;</span></span><br><span class="line"><span class="hljs-string">    &#125;</span></span><br><span class="line"><span class="hljs-string">    require("<span class="hljs-subst">$&#123;modules[<span class="hljs-number">0</span>].id&#125;</span>")</span></span><br><span class="line"><span class="hljs-string">&#125;)(&#123;<span class="hljs-subst">$&#123;modules.map(<span class="hljs-built_in">module</span> =&gt;</span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">        (<span class="hljs-string">`"<span class="hljs-subst">$&#123;<span class="hljs-built_in">module</span>.id&#125;</span>":<span class="hljs-subst">$&#123;generateModuleTemplate(<span class="hljs-built_in">module</span>.code)&#125;</span>`</span>)</span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">    )&#125;</span>&#125;)`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码我们可以分两块看下，最外层实际上就是一个立即执行函数表达式，将 modulesTemplateObject 对象传给了 modules。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">((<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">modules</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 这里的 modules 就是最下面传过来的 kv 对象</span></span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;)(modulesTemplateObject)&#125;</span><br></pre></td></tr></table></figure><p>再看下 <code>generateModuleTemplate</code> 做了什么，</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateModuleTemplate</span>(<span class="hljs-params">code</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 把每个 JS 文件中的代码块包在一个 function 里</span></span><br><span class="line">    <span class="hljs-comment">// 将外部的 exports 和 require 传入 function 内</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">`function (exports, require) &#123;</span></span><br><span class="line"><span class="hljs-string">    <span class="hljs-subst">$&#123;code&#125;</span></span></span><br><span class="line"><span class="hljs-string">&#125;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着重头戏来了，我们本篇文章的核心代码，</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">require</span>(<span class="hljs-params">moduleId</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> exports = &#123;&#125;;</span><br><span class="line">    <span class="hljs-comment">// 这里用 Object 包裹了 module，使得 module 作为值调用</span></span><br><span class="line">    modules[moduleId](exports, <span class="hljs-built_in">require</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> exports;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 执行第一个 module，也就是 src/index.js</span></span><br><span class="line"><span class="hljs-built_in">require</span>(<span class="hljs-string">"$&#123;modules[0].id&#125;"</span>)</span><br></pre></td></tr></table></figure><p>接着我们将整个过程串起来，</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">webpackMini</span> (<span class="hljs-params">fileEntry</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> graph = createGraph(fileEntry)</span><br><span class="line">  <span class="hljs-comment">// console.log(graph);</span></span><br><span class="line">  <span class="hljs-keyword">const</span> modules = flattenGraph(graph)</span><br><span class="line">  <span class="hljs-comment">// console.log(modules);</span></span><br><span class="line">  <span class="hljs-keyword">const</span> bundle = createBundle(modules)</span><br><span class="line">  <span class="hljs-comment">// console.log(bundle);</span></span><br><span class="line">  <span class="hljs-comment">// 生成文件方法就不在此赘述了</span></span><br><span class="line">  generateFile(bundle)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">webpackMini(<span class="hljs-string">'../src/index.js'</span>)</span><br></pre></td></tr></table></figure><p>执行程序，看看在 dist 目录下是不是得到了 bundle.js。运行 bundle.js ，得到输出：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo: Hello I am foo!</span><br><span class="line">bar.say: Hello I am bar!</span><br></pre></td></tr></table></figure><p>至此，一个最简单的 JS 模块打包器就完成了！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>回顾一下，我们先是通过 babel 将 JS 字符串转换成了可供分析的语法结构树，然后遍历得到模块间的依赖关系，最后将依赖关系通过我们自己实现的 require 方法加载进来，这样就实现了一个最简单的 JS 模块打包器。</p><p><img src="./bundle.svg" alt="bundle"></p><p>后续我们将继续完善代码，诸如打包 commonjs 代码、组件加载缓存、处理组件循环调用等功能。本文的代码保存在 <a href="https://github.com/daweilv/webpack-mini" target="_blank" rel="noopener">webpack-mini</a>，欢迎 star 关注。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019 年的前端技术栈，无论你是用 Vue 还是用 React ，应该都离不开一样工具 – webpack。webpack 极大的简化了前端开发的构建过程，只需提供一个入口文件，webpack 就能自动帮我们分析出相关依赖，构建出 bundle 包。&lt;/p&gt;&lt;p&gt;webpack 很强大，但是大家知道 webpack 到底是怎么样打包的吗？本文将从一个很简单的例子，一步步带领大家探寻 webpack 打包的基本原理。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://daweilv.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="webpack" scheme="https://daweilv.com/tags/webpack/"/>
    
      <category term="前端构建" scheme="https://daweilv.com/tags/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA/"/>
    
      <category term="build your own" scheme="https://daweilv.com/tags/build-your-own/"/>
    
  </entry>
  
  <entry>
    <title>API设计总结</title>
    <link href="https://daweilv.com/2019/05/29/API-design/"/>
    <id>https://daweilv.com/2019/05/29/API-design/</id>
    <published>2019-05-29T01:54:23.000Z</published>
    <updated>2019-09-16T08:47:58.789Z</updated>
    
    <content type="html"><![CDATA[<p>本文总结了笔者近几年在参与设计 API 时收获的一些经验和教训，针对中小型项目初期，供大家参考。<br><a id="more"></a></p><ol><li><p><code>设计</code> 基础数据与用户数据尽量分离。<br>分别用不同的字段存储或直接分到不同的 API里。<br>逻辑解耦，便于后期修改，也便于优化打开速度。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// bad</span></span><br><span class="line">&#123;</span><br><span class="line">    title:<span class="hljs-string">"新概念英语"</span>,</span><br><span class="line">    image:<span class="hljs-string">"http://example.com/en.png"</span>,</span><br><span class="line">    learnProgess:<span class="hljs-number">80</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// good</span></span><br><span class="line">&#123;</span><br><span class="line">    baseData:&#123;</span><br><span class="line">        title:<span class="hljs-string">""</span>,</span><br><span class="line">        image:<span class="hljs-string">"http://example.com/en.png"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    userData:&#123;</span><br><span class="line">        learnProgess:<span class="hljs-number">80</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>设计</code> 鉴权数据能放 header 尽量放 header。不要往 GET/POST 请求参数里放。</p></li><li><p><code>设计</code> 公共请求参数/响应参数提前设计，预留空间以备升级。</p></li><li><p><code>设计</code> 原则上严格参考 GET/POST 的语义规范（GET 幂等，POST 提交数据）。<br>之前一个项目采用了全 POST 请求，后期复盘后认为是一个比较失败的设计。公共参数都放在 POST 请求体里，无法修改成 GET 请求，导致做 PWA 的时候处处受限，并且也没有充分利用 GET 请求的强制缓存/协商缓存功能。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// bad</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-string">"channel"</span>:<span class="hljs-string">""</span>,</span><br><span class="line">    <span class="hljs-string">"locale"</span>:<span class="hljs-string">"zh_CN"</span>,</span><br><span class="line">    <span class="hljs-string">"appver"</span>:<span class="hljs-string">"1.2.3"</span>,</span><br><span class="line">    <span class="hljs-string">"token"</span>:<span class="hljs-string">"mytoken123"</span>,</span><br><span class="line">    <span class="hljs-string">"sitecode"</span>:<span class="hljs-string">"sitecode567"</span>,</span><br><span class="line">    <span class="hljs-string">"data"</span>:&#123;</span><br><span class="line">        <span class="hljs-string">"id"</span>:<span class="hljs-number">123</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>开发</code> 后端开发的时候根据项目实际规模预留合理的升级空间，切勿考虑过多导致过度设计，冗余代码。</p></li><li><p><code>开发</code> 复杂逻辑在对性能没有极端要求的情况下，适当将并发操作改为串行，降低代码的阅读成本，或使用 <a href="https://github.com/caolan/async" target="_blank" rel="noopener">async</a> 流程控制库，在适当增加代码冗余的情况下，降低代码的阅读成本。</p></li><li><p><code>开发</code> 文件名、变量名严禁单字母缩写。<br>如，<code>wQuizAction.js</code>/<code>uOrderReducer.js</code> 等，当时写的时候也许觉得很清晰，但是给其他阅读代码的人造成很大障碍，即使是本人在查看几个月前的代码也很可能忘记缩写的含义。</p></li><li><p><code>数据库</code> 用户相关的表在设计初级必须评估规模，根据可能出现的查询条件建索引，减少慢SQL。另外使用阿里云RDS的用户也可以经常查看下后台日志。</p></li><li><p><code>数据库</code> 数据库的字段尽可能与业务代码保持一致，重构时也要考虑重构完全。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文总结了笔者近几年在参与设计 API 时收获的一些经验和教训，针对中小型项目初期，供大家参考。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="系统设计" scheme="https://daweilv.com/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="API" scheme="https://daweilv.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>记一次网站打开缓慢故障排查</title>
    <link href="https://daweilv.com/2019/04/25/slowly-website-troubleshooting/"/>
    <id>https://daweilv.com/2019/04/25/slowly-website-troubleshooting/</id>
    <published>2019-04-25T08:09:16.000Z</published>
    <updated>2019-09-16T10:25:06.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>某日，学校用户短时间大量登录学习，网站出现登录不上，无法显示网站内容问题。</p><p>具体表现为，网站打开迅速，资源加载迅速，但是登录、网站详情内容等涉及 API 的地方显示极慢。</p><a id="more"></a><h2 id="定位过程"><a href="#定位过程" class="headerlink" title="定位过程"></a>定位过程</h2><p>我本地从 wifi 切换到 4G 网络访问网站同样如此，<code>排除服务器及客户端网络问题</code>。</p><p>查看后台日志，发现对某个日志表的访问量上升，初步定位为<code>数据库问题</code>。</p><p>登录阿里云 RDS，选择现网实例 –&gt; 日志管理 –&gt; 慢日志明细，查询后发现出现大量慢日志，实例 CPU 占用为 97%，且无下降趋势，问题定位为<code>数据库慢 SQL 问题</code>。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>现网实例 –&gt; CloudDBA –&gt; SQL 优化，贴入问题 SQL，选择 <code>SQL 优化诊断</code>，根据给出的索引建议，优化 SQL &amp; 建立索引。观察数据库 CPU 占用，下降，尝试官网访问，正常，问题解决。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>设计用户记录的相关表，一定要预先根据可能出现的查询条件建好索引，定期检查是否有慢 SQL 出现，针对性调整索引。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;某日，学校用户短时间大量登录学习，网站出现登录不上，无法显示网站内容问题。&lt;/p&gt;&lt;p&gt;具体表现为，网站打开迅速，资源加载迅速，但是登录、网站详情内容等涉及 API 的地方显示极慢。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://daweilv.com/categories/DevOps/"/>
    
    
      <category term="故障排查" scheme="https://daweilv.com/tags/%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>parcel初体验</title>
    <link href="https://daweilv.com/2019/02/15/first-use-parcel/"/>
    <id>https://daweilv.com/2019/02/15/first-use-parcel/</id>
    <published>2019-02-15T08:42:55.000Z</published>
    <updated>2019-09-16T08:47:58.756Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要做一个纯静态网站，因工作量比较少，功能又不复杂，上 webpack 觉得太麻烦了，加上早就对 parcel 种草，所以这次决定试用一下号称零配置的 parcel 。</p><a id="more"></a><h2 id="上手"><a href="#上手" class="headerlink" title="上手"></a>上手</h2><p>根据<a href="https://parceljs.org/getting_started.html" target="_blank" rel="noopener">官网文档</a>很快就安装好了。值得点赞的是，在引入 less 文件的时候，parcel 自动检测到了 less，并自动下载了相关编译插件，稍等片刻即可使用。打包速度挺快，HMR 也是挺好用。</p><h2 id="深度使用"><a href="#深度使用" class="headerlink" title="深度使用"></a>深度使用</h2><h4 id="路径修改"><a href="#路径修改" class="headerlink" title="路径修改"></a>路径修改</h4><p>很快定制需求来了，由于 HTML 文件内的相对路径都自动转换成了 dist 下的绝对路径，而我需要能在不启动服务器的情况下，在本地直接打开 index.html 预览。那么就需要将 HTML 内的资源路径都转换成相对路径。查询文档后发现指定 <code>--public-url</code> 即可。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parcel build src/page/index.html --public-url ./</span><br></pre></td></tr></table></figure><h4 id="postcss-插件引入"><a href="#postcss-插件引入" class="headerlink" title="postcss 插件引入"></a>postcss 插件引入</h4><p>由于需要支持响应式，所以进入了 rem 单位，为了省事引入了 <code>postcss-pxtorem</code> 插件，能够自动将 px 转换成 rem。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># postcss.config.js</span><br><span class="line"><span class="hljs-keyword">const</span> pxtorem = <span class="hljs-built_in">require</span>(<span class="hljs-string">'postcss-pxtorem'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [pxtorem(&#123; <span class="hljs-attr">rootValue</span>: <span class="hljs-number">50</span>, <span class="hljs-attr">propList</span>: [<span class="hljs-string">'*'</span>] &#125;)],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="深坑"><a href="#深坑" class="headerlink" title="深坑"></a>深坑</h2><h4 id="HMR-less-修改后不自动加载"><a href="#HMR-less-修改后不自动加载" class="headerlink" title="HMR less 修改后不自动加载"></a>HMR less 修改后不自动加载</h4><p>在特定的某个页面下，我修改了 less 文件，parcel 在编译后，浏览器并没有刷新样式。</p><h4 id="style-appearance-无法加上厂商前缀"><a href="#style-appearance-无法加上厂商前缀" class="headerlink" title="style appearance 无法加上厂商前缀"></a>style appearance 无法加上厂商前缀</h4><p>正常情况下，<code>appearance: none;</code>会被编译成 <code>-webkit-appearance: none;-moz-appearance: none;appearance: none;</code> ，但是 parcel 并没有转换。一开始我以为是 browserslist 的问题，在查询了 <a href="https://github.com/postcss/autoprefixer#debug" target="_blank" rel="noopener">autoprefixer</a> 文档后发现，autoprefixer 没问题。所以问题就出在 parcel 上。引入指定 autoprefixer ，覆盖掉 parcel 的 autoprefixer 问题解决。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># postcss.config.js</span><br><span class="line"><span class="hljs-keyword">const</span> pxtorem = <span class="hljs-built_in">require</span>(<span class="hljs-string">'postcss-pxtorem'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> autoprefixer = <span class="hljs-built_in">require</span>(<span class="hljs-string">'autoprefixer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [autoprefixer, pxtorem(&#123; <span class="hljs-attr">rootValue</span>: <span class="hljs-number">50</span>, <span class="hljs-attr">propList</span>: [<span class="hljs-string">'*'</span>] &#125;)],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="打包目录反人类"><a href="#打包目录反人类" class="headerlink" title="打包目录反人类"></a>打包目录反人类</h4><p>第一次把项目打包出来后看了下目录，惊了个呆，居然所有文件平铺在 dist 目录下。。。一个合理的目录至少要把 css/img/font 等资源分门别类放在对应文件夹下，在深入了解了下之后，发现居然不能改，还发现了另外一个深坑。<br><img src="./dist_demo.png" alt="dist_demo.png"></p><h4 id="dist-下的文件无法取消-hash"><a href="#dist-下的文件无法取消-hash" class="headerlink" title="dist 下的文件无法取消 hash"></a>dist 下的文件无法取消 hash</h4><p>作为演示 demo 页面，我对强缓存没有需求，所以我不需要对我的资源进行 hash 重命名，这样也不够美观。翻了一遍 issue 后发现，由于打包目录的原因，同名文件可能出现在dist下，所以 hash 文件名策略不能取消。好消息是 parcel 2 会通过插件的方式支持命名策略。<a href="https://github.com/parcel-bundler/parcel/issues/233#issuecomment-435718097" target="_blank" rel="noopener">https://github.com/parcel-bundler/parcel/issues/233#issuecomment-435718097</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>parcel 作为一个新前端编译工具，带来了零配置的概念，轻度尝鲜很棒。但是作为生产使用的时候，还有不少 bug 和缺点，gulp&amp;webpack 等成熟的插件往往没有对应的文档，目前来讲并不推荐作为生产工具使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要做一个纯静态网站，因工作量比较少，功能又不复杂，上 webpack 觉得太麻烦了，加上早就对 parcel 种草，所以这次决定试用一下号称零配置的 parcel 。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://daweilv.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端构建" scheme="https://daweilv.com/tags/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA/"/>
    
      <category term="Parcel" scheme="https://daweilv.com/tags/Parcel/"/>
    
  </entry>
  
  <entry>
    <title>git&amp;npm设置proxy</title>
    <link href="https://daweilv.com/2019/01/11/set-git-npm-proxy/"/>
    <id>https://daweilv.com/2019/01/11/set-git-npm-proxy/</id>
    <published>2019-01-11T15:58:41.000Z</published>
    <updated>2019-09-16T08:47:58.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Npm-设置-proxy"><a href="#Npm-设置-proxy" class="headerlink" title="Npm 设置 proxy"></a>Npm 设置 proxy</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="hljs-built_in">set</span> proxy http://127.0.0.1:1087</span><br><span class="line">npm config <span class="hljs-built_in">set</span> https-proxy http://127.0.0.1:1087</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 需要认证的 proxy</span></span><br><span class="line">npm config <span class="hljs-built_in">set</span> proxy http://username:password@server:port</span><br><span class="line">npm config <span class="hljs-built_in">set</span> https-proxy http://username:pawword@server:port</span><br></pre></td></tr></table></figure><h2 id="Npm-取消-proxy"><a href="#Npm-取消-proxy" class="headerlink" title="Npm 取消 proxy"></a>Npm 取消 proxy</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config rm proxy</span><br><span class="line">npm config rm https-proxy</span><br></pre></td></tr></table></figure><h2 id="Git-设置给特定url设置-proxy"><a href="#Git-设置给特定url设置-proxy" class="headerlink" title="Git 设置给特定url设置 proxy"></a>Git 设置给特定url设置 proxy</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:1087</span><br><span class="line">git config --global https.proxy https://127.0.0.1:1087</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 只对github.com</span></span><br><span class="line">git config --global http.https://github.com.proxy http://127.0.0.1:1087</span><br><span class="line">git config --global https.https://github.com.proxy https://127.0.0.1:1087</span><br></pre></td></tr></table></figure><h2 id="Git-取消-proxy"><a href="#Git-取消-proxy" class="headerlink" title="Git 取消 proxy"></a>Git 取消 proxy</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="hljs-built_in">unset</span> http.https://github.com.proxy</span><br><span class="line">git config --global --<span class="hljs-built_in">unset</span> https.https://github.com.proxy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Npm-设置-proxy&quot;&gt;&lt;a href=&quot;#Npm-设置-proxy&quot; class=&quot;headerlink&quot; title=&quot;Npm 设置 proxy&quot;&gt;&lt;/a&gt;Npm 设置 proxy&lt;/h2&gt;&lt;figure class=&quot;highlight bash hlj
      
    
    </summary>
    
      <category term="DevOps" scheme="https://daweilv.com/categories/DevOps/"/>
    
    
      <category term="Git" scheme="https://daweilv.com/tags/Git/"/>
    
      <category term="npm" scheme="https://daweilv.com/tags/npm/"/>
    
      <category term="proxy" scheme="https://daweilv.com/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>cloc,一个好用的代码统计小工具</title>
    <link href="https://daweilv.com/2018/12/11/cloc-code-analysis/"/>
    <id>https://daweilv.com/2018/12/11/cloc-code-analysis/</id>
    <published>2018-12-11T07:12:55.000Z</published>
    <updated>2019-09-16T08:48:56.680Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司在做双软认证，需要提供一下源码的行数，网上找了一番，发现一个非常不错的小工具，故分享下。</p><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://github.com/AlDanial/cloc" target="_blank" rel="noopener">cloc</a>，即 Count Lines of Code 的缩写，支持统计众多编程语言源码的空行数、注释行数、物理行数。</p><p>安装非常简单。直接 <code>npm install -g cloc</code> 即可。其他安装方法见 <a href="https://github.com/AlDanial/cloc#user-content-apt-get" target="_blank" rel="noopener">Install via package manager</a>。</p><h3 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h3><h4 id="统计单个文件的行数"><a href="#统计单个文件的行数" class="headerlink" title="统计单个文件的行数"></a>统计单个文件的行数</h4><p>sample.js<br></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hello</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// comments </span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'hello world'</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hello()</span><br></pre></td></tr></table></figure><p></p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 运行</span></span><br><span class="line">cloc sample.js</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 返回结果</span></span><br><span class="line">       1 text file.</span><br><span class="line">       1 unique file.                              </span><br><span class="line">       0 files ignored.</span><br><span class="line"></span><br><span class="line">github.com/AlDanial/cloc v 1.78  T=0.01 s (76.2 files/s, 762.0 lines/s)</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Language                     files          blank        comment           code</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">JavaScript                       1              5              1              4</span><br><span class="line">-------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><blockquote><table><thead><tr><th style="text-align:left">字段</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">files</td><td style="text-align:left">文件数</td></tr><tr><td style="text-align:left">blank</td><td style="text-align:left">空行数</td></tr><tr><td style="text-align:left">comment</td><td style="text-align:left">注释行数</td></tr><tr><td style="text-align:left">code</td><td style="text-align:left">代码行数</td></tr></tbody></table></blockquote><h4 id="统计目录下的源码行数"><a href="#统计目录下的源码行数" class="headerlink" title="统计目录下的源码行数"></a>统计目录下的源码行数</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 运行</span></span><br><span class="line">clol .</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 返回结果</span></span><br><span class="line">   17754 text files.</span><br><span class="line">   12969 unique files.                                          </span><br><span class="line">Complex regular subexpression recursion <span class="hljs-built_in">limit</span> (32766) exceeded at /Users/user/.nvm/versions/node/v8.12.0/bin/cloc line 10685.</span><br><span class="line">Complex regular subexpression recursion <span class="hljs-built_in">limit</span> (32766) exceeded at /Users/user/.nvm/versions/node/v8.12.0/bin/cloc line 10685.</span><br><span class="line">    5797 files ignored.</span><br><span class="line"></span><br><span class="line">github.com/AlDanial/cloc v 1.78  T=35.80 s (335.9 files/s, 77895.9 lines/s)</span><br><span class="line">---------------------------------------------------------------------------------------</span><br><span class="line">Language                             files          blank        comment           code</span><br><span class="line">---------------------------------------------------------------------------------------</span><br><span class="line">JavaScript                            8763         192138         281252        1465456</span><br><span class="line">JSON                                  1403            756              0         327584</span><br><span class="line">Markdown                              1093          52708              4         134228</span><br><span class="line">TypeScript                              85          14720          34711         115732</span><br><span class="line">HTML                                   231          47061            580          51339</span><br><span class="line">CSS                                     90           3165           1207          26616</span><br><span class="line">XML                                     56           3246           1300          13713</span><br><span class="line">C/C++ Header                            21           1147            341           5913</span><br><span class="line">YAML                                   120            105            128           2711</span><br><span class="line">SQL                                     30            411            374           2249</span><br><span class="line">CoffeeScript                            17            198            112           1111</span><br><span class="line">Protocol Buffers                        51            245            739            719</span><br><span class="line">make                                    23            213            188            676</span><br><span class="line">DTD                                      1            179            177            514</span><br><span class="line">Windows Module Definition                5             88              0            437</span><br><span class="line">Python                                   1             81            175            355</span><br><span class="line">C++                                      7             70             36            317</span><br><span class="line">JSP                                      3             27             44            273</span><br><span class="line">ActionScript                             1             38            102            132</span><br><span class="line">JSON5                                    2              0              0            123</span><br><span class="line">D                                        5              0              0             71</span><br><span class="line">Bourne Shell                             5             25              7             53</span><br><span class="line">Handlebars                               2             10              0             46</span><br><span class="line">EJS                                      3              6              0             27</span><br><span class="line">Vuejs Component                          4              0              4             21</span><br><span class="line">Bourne Again Shell                       1              2              1             20</span><br><span class="line">Lisp                                     1              0              0              6</span><br><span class="line">DOS Batch                                1              0              0              2</span><br><span class="line">---------------------------------------------------------------------------------------</span><br><span class="line">SUM:                                 12025         316639         321482        2150444</span><br><span class="line">---------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司在做双软认证，需要提供一下源码的行数，网上找了一番，发现一个非常不错的小工具，故分享下。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://daweilv.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="cloc" scheme="https://daweilv.com/tags/cloc/"/>
    
  </entry>
  
  <entry>
    <title>Prettier&amp;ESLint集成</title>
    <link href="https://daweilv.com/2018/10/20/prettier-eslint-integration/"/>
    <id>https://daweilv.com/2018/10/20/prettier-eslint-integration/</id>
    <published>2018-10-20T13:39:57.000Z</published>
    <updated>2019-09-16T08:47:58.769Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D eslint eslint-config-alloy eslint-config-prettier eslint-plugin-react prettier prettier-eslint</span><br></pre></td></tr></table></figure><p>.eslintrc.js<br></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">    extends: [</span><br><span class="line">        <span class="hljs-string">'eslint-config-alloy/react'</span>,</span><br><span class="line">        <span class="hljs-string">'eslint-config-prettier'</span>,</span><br><span class="line">        <span class="hljs-string">'eslint-config-prettier/react'</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>.prettierrc.js<br></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">    singleQuote: <span class="hljs-literal">true</span>,</span><br><span class="line">    trailingComma: <span class="hljs-string">'es5'</span>,</span><br><span class="line">    semi: <span class="hljs-literal">true</span>,</span><br><span class="line">    tabWidth: <span class="hljs-number">4</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
      <category term="前端" scheme="https://daweilv.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端构建" scheme="https://daweilv.com/tags/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA/"/>
    
      <category term="Prettier" scheme="https://daweilv.com/tags/Prettier/"/>
    
      <category term="ESLint" scheme="https://daweilv.com/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>React与安卓/iOS通信实践</title>
    <link href="https://daweilv.com/2018/08/23/communicate-between-react-android-ios/"/>
    <id>https://daweilv.com/2018/08/23/communicate-between-react-android-ios/</id>
    <published>2018-08-23T01:36:25.000Z</published>
    <updated>2019-09-16T09:47:45.506Z</updated>
    
    <content type="html"><![CDATA[<p>安卓/iOS 可以调用 JS 侧的全局对象来完成通信，那么使用 React/Vue 的时候我们的方法都封装在框架内部，并没有暴露在全局，原生侧调不到框架内部的方法，怎么办？</p><a id="more"></a><p>使用 EventEmitter！</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123; eventEmmiter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"./eventEmmiter"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> Bridge = &#123;</span><br><span class="line">  <span class="hljs-comment">// 统一接口请求参数&amp;类型，方便多平台调用</span></span><br><span class="line">  ios: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event, params, needCallback = true</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(</span><br><span class="line">        <span class="hljs-string">`invoke iOS.event[<span class="hljs-subst">$&#123;event&#125;</span>] with params: <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(params)&#125;</span>`</span></span><br><span class="line">      );</span><br><span class="line">      <span class="hljs-keyword">if</span> (!params) params = &#123;&#125;;</span><br><span class="line">      <span class="hljs-keyword">const</span> callbackEvent = <span class="hljs-keyword">this</span>.getCallbackEvent(event);</span><br><span class="line">      <span class="hljs-keyword">if</span> (needCallback) &#123;</span><br><span class="line">        eventEmmiter.once(callbackEvent, res =&gt; &#123;</span><br><span class="line">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`callback iOS.event[<span class="hljs-subst">$&#123;callbackEvent&#125;</span>] with data: <span class="hljs-subst">$&#123;res&#125;</span>`</span>);</span><br><span class="line">          <span class="hljs-keyword">if</span> (res &amp;&amp; <span class="hljs-keyword">typeof</span> res === <span class="hljs-string">"string"</span>) res = <span class="hljs-built_in">JSON</span>.parse(res);</span><br><span class="line">          resolve(res);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-comment">// 字符串化参数</span></span><br><span class="line">      <span class="hljs-keyword">let</span> msg = <span class="hljs-built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        method: event,</span><br><span class="line">        data: params,</span><br><span class="line">        callback: callbackEvent</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`send iOS msg <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(msg)&#125;</span>`</span>);</span><br><span class="line">      <span class="hljs-comment">// native 为 wkwebview 注册的对象</span></span><br><span class="line">      webkit.messageHandlers.native.postMessage(msg);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 统一接口请求参数&amp;类型，方便多平台调用</span></span><br><span class="line">  android: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event, params, needCallback = true</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(</span><br><span class="line">        <span class="hljs-string">`invoke Android.event[<span class="hljs-subst">$&#123;event&#125;</span>] with params: <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(params)&#125;</span>`</span></span><br><span class="line">      );</span><br><span class="line">      <span class="hljs-keyword">if</span> (!params) params = &#123;&#125;;</span><br><span class="line">      <span class="hljs-keyword">const</span> callbackEvent = <span class="hljs-keyword">this</span>.getCallbackEvent(event);</span><br><span class="line">      <span class="hljs-keyword">if</span> (needCallback) &#123;</span><br><span class="line">        eventEmmiter.once(callbackEvent, res =&gt; &#123;</span><br><span class="line">          <span class="hljs-built_in">console</span>.log(</span><br><span class="line">            <span class="hljs-string">`callback Android.event[<span class="hljs-subst">$&#123;callbackEvent&#125;</span>] with data: <span class="hljs-subst">$&#123;res&#125;</span>`</span></span><br><span class="line">          );</span><br><span class="line">          <span class="hljs-keyword">if</span> (res &amp;&amp; <span class="hljs-keyword">typeof</span> res === <span class="hljs-string">"string"</span>) res = <span class="hljs-built_in">JSON</span>.parse(res);</span><br><span class="line">          resolve(res);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">let</span> msg = <span class="hljs-built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        method: event,</span><br><span class="line">        data: params,</span><br><span class="line">        callback: callbackEvent</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`send Android msg <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(msg)&#125;</span>`</span>);</span><br><span class="line">      <span class="hljs-comment">// Android 为安卓侧注册的对象</span></span><br><span class="line">      Android[event](msg);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 生成随机事件，防止多次点击重复调用</span></span><br><span class="line">  getCallbackEvent: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      event + <span class="hljs-string">"-"</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime() + <span class="hljs-string">"-"</span> + (<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">100</span>).toFixed()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Bridge;</span><br></pre></td></tr></table></figure><h3 id="JS-向原生请求消息，并接受回调"><a href="#JS-向原生请求消息，并接受回调" class="headerlink" title="JS 向原生请求消息，并接受回调"></a>JS 向原生请求消息，并接受回调</h3><p>JS 侧注册 EventEmitter 事件，给原生发消息和当前事件，当原生返回消息的时候，调用当前事件的回调，并将数据返回。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 根据 URL 约定的字段来判断当前在什么平台</span></span><br><span class="line"><span class="hljs-comment">// eg: /detail/123?sitecode=ios</span></span><br><span class="line"><span class="hljs-comment">// 调用时根据平台调用 Bridge.ios / Bridge.android</span></span><br><span class="line"><span class="hljs-keyword">if</span> (inIOSAPP()) &#123;</span><br><span class="line">  <span class="hljs-comment">// 给 iOS 侧发登录请求，iOS侧弹出原生登录页，完成登录后回调</span></span><br><span class="line">  Bridge.ios(LOGIN_EVENT).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// save user info</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (inAndroidAPP()) &#123;</span><br><span class="line">  Bridge.android(LOGIN_EVENT).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// save user info</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">  <span class="hljs-comment">// 原生浏览器，弹出登录框</span></span><br><span class="line">  <span class="hljs-keyword">this</span>.toggleLoginModal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原生向-JS-请求消息"><a href="#原生向-JS-请求消息" class="headerlink" title="原生向 JS 请求消息"></a>原生向 JS 请求消息</h3><p>JS 侧注册 EventEmitter 事件，原生调用当前事件的回调，并将数据返回。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">    eventEmmiter.on(SOME_EVENT, (res) =&gt; &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(res)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安卓/iOS 可以调用 JS 侧的全局对象来完成通信，那么使用 React/Vue 的时候我们的方法都封装在框架内部，并没有暴露在全局，原生侧调不到框架内部的方法，怎么办？&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://daweilv.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://daweilv.com/tags/React/"/>
    
      <category term="跨平台通信" scheme="https://daweilv.com/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>第三方微信登录/注册功能集成-系统流程分析</title>
    <link href="https://daweilv.com/2018/08/02/wechat-login-system-design/"/>
    <id>https://daweilv.com/2018/08/02/wechat-login-system-design/</id>
    <published>2018-08-02T06:32:33.000Z</published>
    <updated>2019-09-16T09:47:45.530Z</updated>
    
    <content type="html"><![CDATA[<p>某日，天空飘来集成第三方微信登录/注册功能的需求，业务侧轻飘飘的一笔带过，表示这个需求很简单，点击登录，就 ok 了。笔者满脸黑线的表示这个功能想做的好，没有用户吐槽的话，需要考虑的情况非常多。以下便是笔者对该功能的需求分析。因文字描述达不到非常清晰地解释，所以以流程图的方式表示。</p><a id="more"></a><h3 id="微信登录"><a href="#微信登录" class="headerlink" title="微信登录"></a>微信登录</h3><p><a href="login.svg" target="_blank">新页面打开浏览</a><br><img src="login.svg" alt="login.svg"></p><h3 id="微信注册"><a href="#微信注册" class="headerlink" title="微信注册"></a>微信注册</h3><p><a href="register.svg" target="_blank">新页面打开浏览</a><br><img src="register.svg" alt="register.svg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;某日，天空飘来集成第三方微信登录/注册功能的需求，业务侧轻飘飘的一笔带过，表示这个需求很简单，点击登录，就 ok 了。笔者满脸黑线的表示这个功能想做的好，没有用户吐槽的话，需要考虑的情况非常多。以下便是笔者对该功能的需求分析。因文字描述达不到非常清晰地解释，所以以流程图的方式表示。&lt;/p&gt;
    
    </summary>
    
      <category term="系统设计" scheme="https://daweilv.com/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="微信登录" scheme="https://daweilv.com/tags/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95/"/>
    
      <category term="微信注册" scheme="https://daweilv.com/tags/%E5%BE%AE%E4%BF%A1%E6%B3%A8%E5%86%8C/"/>
    
      <category term="公众号开发" scheme="https://daweilv.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>text-size-adjust bug 分析</title>
    <link href="https://daweilv.com/2018/07/28/text-size-adjust-bug/"/>
    <id>https://daweilv.com/2018/07/28/text-size-adjust-bug/</id>
    <published>2018-07-28T07:41:46.000Z</published>
    <updated>2019-09-16T08:47:58.772Z</updated>
    
    <content type="html"><![CDATA[<p>某日，同事 J 说发现一个奇怪的现象：一个列表页，在 iPhone7 竖屏上字体大小正常，横屏的时候有些字体就变的特别大。本文便是笔者对这一 “bug” 的分析过程。</p><a id="more"></a><p>拿到那个页面，在 MacOS Chrome 下模拟了 iPhone7 的设备，发现横竖屏都是正常的。又在自己的手机上测了一下，果然重现了。如下图：</p><p><img src="example.png" alt="example.png"></p><p>因为这个页面是响应式页面，对手机横版做了适配，笔者猜测可能是对应的样式没应用上。但转念一想，不对啊，就算是样式没应用上，也应该是整个列表都有问题，不可能就那一个 item 字体有问题。</p><p>在调试了几次样式无果后，笔者猜测是 webkit 对字体在某种情况下的“人性化智能”缩放导致，类似桌面端的 Chrome 对 12px 以下字体的限制，具体是什么原因导致的不知道。Google 一番发现有个属性很可能是导致这个 bug 原因：<code>text-size-adjust</code>。</p><p>引用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-size-adjust" target="_blank" rel="noopener">MDN</a> 上对 <code>text-size-adjust</code> 的解释：</p><blockquote><p>text-size-adjust 属性 允许我们控制将文本溢出算法应用到一些手机设备上。这个属性还没有写进标准，使用时必须加上前缀：-moz-text-size-adjust，-webkit-text-size-adjust,，和 -ms-text-size-adjust。</p><p>因为缩放适配小屏幕而导致文字会变得很小，许多手机浏览器会使用文本溢出算法让文本变大而更易读。当一个包含文本的元素宽度用了 100%，他的文本大小会增加直到达到一个易读的大小，但是不会修改布局。</p></blockquote><p>So? Feature not bug?????</p><p>笔者尝试在 item 容器样式上加了一个 <code>-webkit-text-size-adjust:none</code>，发现样式正常了。</p><p>到底是什么情况下 <code>text-size-adjust</code> 会自动调整呢？笔者写了几个例子，来还原这 bug，注意使用 iPhone 打开，并观察横竖屏：</p><ul><li>正常的列表，<a href="/demo/text-size-adjust/normal.html">点击查看</a></li><li>异常的列表，<a href="/demo/text-size-adjust/bug.html">点击查看</a></li><li>出现异常并被修复的列表，<a href="/demo/text-size-adjust/fixed.html">点击查看</a></li></ul><p>分析了一下 <code>text-size-adjust</code> 出现的可能情况：</p><ol><li>容器宽度为百分比，不光 100% 的时候；</li><li>列表项中至少有 2 个元素应用了相同的字体，单个元素没有出现放大的效果；</li><li>容器宽度比 viewport 的宽度大，不论是百分比 <code>120%</code> 还是固定值 px；</li></ol><p>修复的方法：</p><ol><li>设置一个比 viewport 窄的固定值；</li><li>在外层样式上应用 <code>text-size-adjust:none</code> 或 <code>text-size-adjust:100%</code> ，<a href="https://drafts.csswg.org/css-size-adjust/#propdef-text-size-adjust" target="_blank" rel="noopener">两种设置等效</a>，没有用 autoprefix 的同学记得加上厂商前缀，经测试，不带 <code>-webkit</code> 前缀的 <code>text-size-adjust:none</code> 是无效的。<figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">html</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">-ms-text-size-adjust</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">  <span class="hljs-attribute">-webkit-text-size-adjust</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">  <span class="hljs-attribute">text-size-adjust</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>另外，<code>text-size-adjust</code> 在 iPhone 上默认值为 <code>auto</code>，iPad 上的默认值为 <code>none</code>，所以 iPad 并不会出现该 bug。</p><p>参考：</p><ul><li><a href="https://stackoverflow.com/questions/6094324/iphone-ipod-prevent-font-size-changing" target="_blank" rel="noopener">iPhone/iPod - prevent font-size-changing</a></li><li><a href="https://stackoverflow.com/questions/31917088/how-to-prevent-mobile-devices-to-scale-font-size" target="_blank" rel="noopener">How to prevent mobile devices to scale font size</a></li><li><a href="https://stackoverflow.com/questions/6210788/how-to-avoid-ios-automatic-font-size-adjustment" target="_blank" rel="noopener">How to avoid iOS automatic font size adjustment?<br>Ask Question</a></li><li><a href="https://segmentfault.com/q/1010000004427447" target="_blank" rel="noopener">如何判断网页应用了哪些字体</a></li><li><a href="https://segmentfault.com/q/1010000002513103" target="_blank" rel="noopener">text-size-adjust: 100% 有什么作用？</a></li><li><a href="http://yisibl.github.io/share/css-workflow.html#/22" target="_blank" rel="noopener">《CSS 工作流》</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;某日，同事 J 说发现一个奇怪的现象：一个列表页，在 iPhone7 竖屏上字体大小正常，横屏的时候有些字体就变的特别大。本文便是笔者对这一 “bug” 的分析过程。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://daweilv.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="https://daweilv.com/tags/CSS/"/>
    
      <category term="故障排查" scheme="https://daweilv.com/tags/%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>如何编写 Babel 插件</title>
    <link href="https://daweilv.com/2018/07/21/build-you-own-babel-plugin/"/>
    <id>https://daweilv.com/2018/07/21/build-you-own-babel-plugin/</id>
    <published>2018-07-21T12:39:23.000Z</published>
    <updated>2019-09-16T08:47:58.700Z</updated>
    
    <content type="html"><![CDATA[<p>目前主流的前端框架在开发的时候都采用最新的 ES6+ 语法，大部分的向下兼容工作都交给了 Babel 来处理。通过引入 Babel 插件，我们可以大胆地使用最新或是正在起草中，甚至是根本不在标准中的 jsx 等语法，跟甚至是你自己胡诌的写法！</p><p>本文将带大家了解 Babel 是怎么工作的、Babel 插件是怎么工作又是怎么编写的，并写一个与 webpack 集成的最简单的 Babel 插件。</p><a id="more"></a><h3 id="Babel-是怎么工作的"><a href="#Babel-是怎么工作的" class="headerlink" title="Babel 是怎么工作的"></a>Babel 是怎么工作的</h3><p>Babel 是一个 JavaScript 编译器。Babel 通过读取源代码，生成抽象语法树（AST），根据插件对 AST 上对应的节点进行修改，修改完毕后根据新的 AST 输出新的代码。</p><p><code>@babel/parse</code> 原名 <code>babylon</code>，Babel 的<code>解析器</code>，用于读取源代码，生成 AST。</p><p>来看看 <code>import React from &quot;react&quot;;</code> 转换成 AST 后的结构：</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"type"</span>: <span class="hljs-string">"Program"</span>,</span><br><span class="line">  <span class="hljs-attr">"start"</span>: <span class="hljs-number">0</span>,</span><br><span class="line">  <span class="hljs-attr">"end"</span>: <span class="hljs-number">26</span>,</span><br><span class="line">  <span class="hljs-attr">"body"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="hljs-attr">"type"</span>: <span class="hljs-string">"ImportDeclaration"</span>,</span><br><span class="line">      <span class="hljs-attr">"start"</span>: <span class="hljs-number">0</span>,</span><br><span class="line">      <span class="hljs-attr">"end"</span>: <span class="hljs-number">26</span>,</span><br><span class="line">      <span class="hljs-attr">"specifiers"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="hljs-attr">"type"</span>: <span class="hljs-string">"ImportDefaultSpecifier"</span>,</span><br><span class="line">          <span class="hljs-attr">"start"</span>: <span class="hljs-number">7</span>,</span><br><span class="line">          <span class="hljs-attr">"end"</span>: <span class="hljs-number">12</span>,</span><br><span class="line">          <span class="hljs-attr">"local"</span>: &#123;</span><br><span class="line">            <span class="hljs-attr">"type"</span>: <span class="hljs-string">"Identifier"</span>,</span><br><span class="line">            <span class="hljs-attr">"start"</span>: <span class="hljs-number">7</span>,</span><br><span class="line">            <span class="hljs-attr">"end"</span>: <span class="hljs-number">12</span>,</span><br><span class="line">            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"React"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="hljs-attr">"source"</span>: &#123;</span><br><span class="line">        <span class="hljs-attr">"type"</span>: <span class="hljs-string">"Literal"</span>,</span><br><span class="line">        <span class="hljs-attr">"start"</span>: <span class="hljs-number">18</span>,</span><br><span class="line">        <span class="hljs-attr">"end"</span>: <span class="hljs-number">25</span>,</span><br><span class="line">        <span class="hljs-attr">"value"</span>: <span class="hljs-string">"react"</span>,</span><br><span class="line">        <span class="hljs-attr">"raw"</span>: <span class="hljs-string">"\"react\""</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="hljs-attr">"sourceType"</span>: <span class="hljs-string">"module"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@babel/traverse</code>，Babel 的<code>遍历器</code>，用于维护 AST 的状态，并且负责替换、移除和添加节点。<br><code>@babel/types</code>，Babel 的 helper <code>工具集</code>，包含了构造、验证以及变换 AST 节点的方法。</p><h3 id="Babel-插件又是怎么工作的"><a href="#Babel-插件又是怎么工作的" class="headerlink" title="Babel 插件又是怎么工作的"></a>Babel 插件又是怎么工作的</h3><p>Babel 为插件提供了访客模式，可以轻松的访问对应类型的 AST 节点，进行修改。先看一个例子：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir babel-demo &amp;&amp; <span class="hljs-built_in">cd</span> babel-demo</span><br><span class="line"></span><br><span class="line">npm i -D @babel/core @babel/types</span><br><span class="line"></span><br><span class="line">touch index.js</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// index.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> babel = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/core"</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> code = <span class="hljs-string">'import React from "react";'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> visitor = &#123;</span><br><span class="line">  <span class="hljs-comment">// 我们要修改的节点是 import 声明节点。</span></span><br><span class="line">  ImportDeclaration(path) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(path.parent.type);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(path.node.type);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(path.node.specifiers[<span class="hljs-number">0</span>].local.name);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(path.node.source.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">babel.transform(code, &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    &#123;</span><br><span class="line">      visitor</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><p>可以看到 path 的结构是：</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"parent"</span>: &#123; <span class="hljs-attr">"type"</span>: <span class="hljs-string">"Program"</span> &#125;,</span><br><span class="line">  <span class="hljs-attr">"node"</span>: &#123; <span class="hljs-attr">"type"</span>: <span class="hljs-string">"ImportDeclaration"</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 node 节点可以访问到当前节点。</p><blockquote><p>有同学要问了，我怎么知道我当前要修改的东西是什么类型呢？？</p></blockquote><blockquote><p>先把对应的代码片段贴到 <a href="https://astexplorer.net/" target="_blank" rel="noopener">astexplorer</a>，看到该语句是一个 <code>ImportDeclaration</code>，然后到 <a href="https://github.com/babel/babel/blob/master/packages/babel-parser/ast/spec.md" target="_blank" rel="noopener">Babel Spec</a> 查询这个语句的细节文档（这是 Babel 基于 <a href="https://github.com/estree/estree" target="_blank" rel="noopener">ESTree Spec</a> 做的修改版）。</p></blockquote><p>我们要现在把 <code>import React from &quot;react&quot;;</code> 修改成 <code>import React from &quot;vue&quot;;</code>，来看看怎么实现：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// index.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> babel = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/core"</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> code = <span class="hljs-string">'import React from "react";'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> visitor = &#123;</span><br><span class="line">  ImportDeclaration(path) &#123;</span><br><span class="line">    path.node.source.value = <span class="hljs-string">"vue"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> res = babel.transform(code, &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    &#123;</span><br><span class="line">      visitor</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(res.code);</span><br><span class="line"><span class="hljs-comment">// import React from "vue";</span></span><br></pre></td></tr></table></figure><h3 id="Babel-插件是怎么写的"><a href="#Babel-插件是怎么写的" class="headerlink" title="Babel 插件是怎么写的"></a>Babel 插件是怎么写的</h3><p>来看看我们写的插件如何集成到 webpack 里，毕竟我们是要拿来用的。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// src/index.js</span><br><span class="line">// 这里我们打算写一个插件将 &quot;moduleA&quot; 改成 &quot;moduleB&quot;</span><br><span class="line">import module from &quot;moduleA&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// src/moduleB.js</span><br><span class="line">export default () =&gt; &#123;</span><br><span class="line">  console.log(&quot;B&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// .babelrc</span><br><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"presets"</span>: [[<span class="hljs-string">"@babel/preset-env"</span>]],</span><br><span class="line">  <span class="hljs-attr">"plugins"</span>: [<span class="hljs-string">"myplugin"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Babel 插件的命名方式为 <code>babel-plugin-${your-plugin-name}</code>。npm 打包发布方法可参考 <a href="https://daweilv.com/2018/06/08/webpack-打包组件库并发布到-npm/">使用 Webpack4.0 打包组件库并发布到 npm</a> 这篇文章，这里为了方便，直接在 node_modules 下写了</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// node_modules/babel-plugin-myplugin/index.js</span><br><span class="line">module.exports = function() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    visitor: &#123;</span><br><span class="line">      ImportDeclaration(path) &#123;</span><br><span class="line">        path.node.source.value = &quot;./moduleB&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// dist/main.js</span></span><br><span class="line"><span class="hljs-comment">/******/</span> (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">modules</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// webpackBootstrap</span></span><br><span class="line">  <span class="hljs-comment">/******/</span> <span class="hljs-comment">// The module cache</span></span><br><span class="line">  <span class="hljs-comment">/******/</span> <span class="hljs-keyword">var</span> installedModules = &#123;&#125;; <span class="hljs-comment">// The require function</span></span><br><span class="line">  <span class="hljs-comment">/******/</span></span><br><span class="line">  <span class="hljs-comment">/******/</span> <span class="hljs-comment">/******/</span> <span class="hljs-function"><span class="hljs-keyword">function</span> __webpack_require__(<span class="hljs-params">moduleId</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">/******/</span></span><br><span class="line">    <span class="hljs-comment">/******/</span> <span class="hljs-comment">// Check if module is in cache</span></span><br><span class="line">    <span class="hljs-comment">/******/</span> <span class="hljs-keyword">if</span> (installedModules[moduleId]) &#123;</span><br><span class="line">      <span class="hljs-comment">/******/</span> <span class="hljs-keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line">      <span class="hljs-comment">/******/</span></span><br><span class="line">    &#125; <span class="hljs-comment">// Create a new module (and put it into the cache)</span></span><br><span class="line">    <span class="hljs-comment">/******/</span> <span class="hljs-comment">/******/</span> <span class="hljs-keyword">var</span> <span class="hljs-built_in">module</span> = (installedModules[moduleId] = &#123;</span><br><span class="line">      <span class="hljs-comment">/******/</span> i: moduleId,</span><br><span class="line">      <span class="hljs-comment">/******/</span> l: <span class="hljs-literal">false</span>,</span><br><span class="line">      <span class="hljs-comment">/******/</span> exports: &#123;&#125;</span><br><span class="line">      <span class="hljs-comment">/******/</span></span><br><span class="line">    &#125;); <span class="hljs-comment">// Execute the module function</span></span><br><span class="line">    <span class="hljs-comment">/******/</span></span><br><span class="line">    <span class="hljs-comment">/******/</span> <span class="hljs-comment">/******/</span> modules[moduleId].call(</span><br><span class="line">      <span class="hljs-built_in">module</span>.exports,</span><br><span class="line">      <span class="hljs-built_in">module</span>,</span><br><span class="line">      <span class="hljs-built_in">module</span>.exports,</span><br><span class="line">      __webpack_require__</span><br><span class="line">    ); <span class="hljs-comment">// Flag the module as loaded</span></span><br><span class="line">    <span class="hljs-comment">/******/</span></span><br><span class="line">    <span class="hljs-comment">/******/</span> <span class="hljs-comment">/******/</span> <span class="hljs-built_in">module</span>.l = <span class="hljs-literal">true</span>; <span class="hljs-comment">// Return the exports of the module</span></span><br><span class="line">    <span class="hljs-comment">/******/</span></span><br><span class="line">    <span class="hljs-comment">/******/</span> <span class="hljs-comment">/******/</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">module</span>.exports;</span><br><span class="line">    <span class="hljs-comment">/******/</span></span><br><span class="line">  &#125; <span class="hljs-comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line">  <span class="hljs-comment">/******/</span></span><br><span class="line">  <span class="hljs-comment">/******/</span></span><br><span class="line">  <span class="hljs-comment">/******/</span> <span class="hljs-comment">/******/</span> __webpack_require__.m = modules; <span class="hljs-comment">// expose the module cache</span></span><br><span class="line">  <span class="hljs-comment">/******/</span></span><br><span class="line">  <span class="hljs-comment">/******/</span> <span class="hljs-comment">/******/</span> __webpack_require__.c = installedModules; <span class="hljs-comment">// define getter function for harmony exports</span></span><br><span class="line">  <span class="hljs-comment">/******/</span></span><br><span class="line">  <span class="hljs-comment">/******/</span> <span class="hljs-comment">/******/</span> __webpack_require__.d = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">exports, name, getter</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">/******/</span> <span class="hljs-keyword">if</span> (!__webpack_require__.o(exports, name)) &#123;</span><br><span class="line">      <span class="hljs-comment">/******/</span> <span class="hljs-built_in">Object</span>.defineProperty(exports, name, &#123;</span><br><span class="line">        enumerable: <span class="hljs-literal">true</span>,</span><br><span class="line">        <span class="hljs-keyword">get</span>: getter</span><br><span class="line">      &#125;);</span><br><span class="line">      /******/</span><br><span class="line">    &#125;</span><br><span class="line">    /******/</span><br><span class="line">  &#125;; // define __esModule on exports</span><br><span class="line">  /******/</span><br><span class="line">  /******/ /******/ __webpack_require__.r = function(exports) &#123;</span><br><span class="line">    <span class="hljs-comment">/******/</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Symbol</span> !== <span class="hljs-string">"undefined"</span> &amp;&amp; <span class="hljs-built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">      <span class="hljs-comment">/******/</span> <span class="hljs-built_in">Object</span>.defineProperty(exports, <span class="hljs-built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line">        value: <span class="hljs-string">"Module"</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="hljs-comment">/******/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">/******/</span> <span class="hljs-built_in">Object</span>.defineProperty(exports, <span class="hljs-string">"__esModule"</span>, &#123; <span class="hljs-attr">value</span>: <span class="hljs-literal">true</span> &#125;);</span><br><span class="line">    <span class="hljs-comment">/******/</span></span><br><span class="line">  &#125;; <span class="hljs-comment">// create a fake namespace object // mode &amp; 1: value is a module id, require it // mode &amp; 2: merge all properties of value into the ns // mode &amp; 4: return value when already ns object // mode &amp; 8|1: behave like require</span></span><br><span class="line">  <span class="hljs-comment">/******/</span></span><br><span class="line">  <span class="hljs-comment">/******/</span> <span class="hljs-comment">/******/</span> <span class="hljs-comment">/******/</span> <span class="hljs-comment">/******/</span> <span class="hljs-comment">/******/</span> <span class="hljs-comment">/******/</span> __webpack_require__.t = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    value,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    mode</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  </span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">/******/</span> <span class="hljs-keyword">if</span> (mode &amp; <span class="hljs-number">1</span>) value = __webpack_require__(value);</span><br><span class="line">    <span class="hljs-comment">/******/</span> <span class="hljs-keyword">if</span> (mode &amp; <span class="hljs-number">8</span>) <span class="hljs-keyword">return</span> value;</span><br><span class="line">    <span class="hljs-comment">/******/</span> <span class="hljs-keyword">if</span> (</span><br><span class="line">      mode &amp; <span class="hljs-number">4</span> &amp;&amp;</span><br><span class="line">      <span class="hljs-keyword">typeof</span> value === <span class="hljs-string">"object"</span> &amp;&amp;</span><br><span class="line">      value &amp;&amp;</span><br><span class="line">      value.__esModule</span><br><span class="line">    )</span><br><span class="line">      <span class="hljs-keyword">return</span> value;</span><br><span class="line">    <span class="hljs-comment">/******/</span> <span class="hljs-keyword">var</span> ns = <span class="hljs-built_in">Object</span>.create(<span class="hljs-literal">null</span>);</span><br><span class="line">    <span class="hljs-comment">/******/</span> __webpack_require__.r(ns);</span><br><span class="line">    <span class="hljs-comment">/******/</span> <span class="hljs-built_in">Object</span>.defineProperty(ns, <span class="hljs-string">"default"</span>, &#123;</span><br><span class="line">      enumerable: <span class="hljs-literal">true</span>,</span><br><span class="line">      value: value</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="hljs-comment">/******/</span> <span class="hljs-keyword">if</span> (mode &amp; <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-keyword">typeof</span> value != <span class="hljs-string">"string"</span>)</span><br><span class="line">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> value)</span><br><span class="line">        __webpack_require__.d(</span><br><span class="line">          ns,</span><br><span class="line">          key,</span><br><span class="line">          <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> value[key];</span><br><span class="line">          &#125;.bind(<span class="hljs-literal">null</span>, key)</span><br><span class="line">        );</span><br><span class="line">    <span class="hljs-comment">/******/</span> <span class="hljs-keyword">return</span> ns;</span><br><span class="line">    <span class="hljs-comment">/******/</span></span><br><span class="line">  &#125;; <span class="hljs-comment">// getDefaultExport function for compatibility with non-harmony modules</span></span><br><span class="line">  <span class="hljs-comment">/******/</span></span><br><span class="line">  <span class="hljs-comment">/******/</span> <span class="hljs-comment">/******/</span> __webpack_require__.n = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">module</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">/******/</span> <span class="hljs-keyword">var</span> getter =</span><br><span class="line">      <span class="hljs-built_in">module</span> &amp;&amp; <span class="hljs-built_in">module</span>.__esModule</span><br><span class="line">        ? <span class="hljs-comment">/******/</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDefault</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">module</span>[<span class="hljs-string">"default"</span>];</span><br><span class="line">          &#125;</span><br><span class="line">        : <span class="hljs-comment">/******/</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getModuleExports</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">module</span>;</span><br><span class="line">          &#125;;</span><br><span class="line">    <span class="hljs-comment">/******/</span> __webpack_require__.d(getter, <span class="hljs-string">"a"</span>, getter);</span><br><span class="line">    <span class="hljs-comment">/******/</span> <span class="hljs-keyword">return</span> getter;</span><br><span class="line">    <span class="hljs-comment">/******/</span></span><br><span class="line">  &#125;; <span class="hljs-comment">// Object.prototype.hasOwnProperty.call</span></span><br><span class="line">  <span class="hljs-comment">/******/</span></span><br><span class="line">  <span class="hljs-comment">/******/</span> <span class="hljs-comment">/******/</span> __webpack_require__.o = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">object, property</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.prototype.hasOwnProperty.call(object, property);</span><br><span class="line">  &#125;; <span class="hljs-comment">// __webpack_public_path__</span></span><br><span class="line">  <span class="hljs-comment">/******/</span></span><br><span class="line">  <span class="hljs-comment">/******/</span> <span class="hljs-comment">/******/</span> __webpack_require__.p = <span class="hljs-string">""</span>; <span class="hljs-comment">// Load entry module and return exports</span></span><br><span class="line">  <span class="hljs-comment">/******/</span></span><br><span class="line">  <span class="hljs-comment">/******/</span></span><br><span class="line">  <span class="hljs-comment">/******/</span> <span class="hljs-comment">/******/</span> <span class="hljs-keyword">return</span> __webpack_require__(</span><br><span class="line">    (__webpack_require__.s = <span class="hljs-string">"./src/index.js"</span>)</span><br><span class="line">  );</span><br><span class="line">  <span class="hljs-comment">/******/</span></span><br><span class="line">&#125;)(</span><br><span class="line">  <span class="hljs-comment">/************************************************************************/</span></span><br><span class="line">  <span class="hljs-comment">/******/</span> &#123;</span><br><span class="line">    <span class="hljs-comment">/***/</span> <span class="hljs-string">"./src/index.js"</span>:</span><br><span class="line">      <span class="hljs-comment">/*!**********************!*\</span></span><br><span class="line"><span class="hljs-comment">  !*** ./src/index.js ***!</span></span><br><span class="line"><span class="hljs-comment">  \**********************/</span></span><br><span class="line">      <span class="hljs-comment">/*! no static exports found */</span></span><br><span class="line">      <span class="hljs-comment">/***/</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"><span class="hljs-meta">        "use strict"</span>;</span><br><span class="line">        <span class="hljs-comment">// **关键代码在这里，这里的 moduleA 已经被改成 moduleB 了**</span></span><br><span class="line">        <span class="hljs-built_in">eval</span>(</span><br><span class="line">          <span class="hljs-string">'\n\nvar _moduleB = _interopRequireDefault(__webpack_require__(/*! ./moduleB */ "./src/moduleB.js"));\n\nfunction _interopRequireDefault(obj) &#123; return obj &amp;&amp; obj.__esModule ? obj : &#123; default: obj &#125;; &#125;\n\n//# sourceURL=webpack:///./src/index.js?'</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/***/</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/***/</span> <span class="hljs-string">"./src/moduleB.js"</span>:</span><br><span class="line">      <span class="hljs-comment">/*!************************!*\</span></span><br><span class="line"><span class="hljs-comment">  !*** ./src/moduleB.js ***!</span></span><br><span class="line"><span class="hljs-comment">  \************************/</span></span><br><span class="line">      <span class="hljs-comment">/*! no static exports found */</span></span><br><span class="line">      <span class="hljs-comment">/***/</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"><span class="hljs-meta">        "use strict"</span>;</span><br><span class="line">        <span class="hljs-built_in">eval</span>(</span><br><span class="line">          <span class="hljs-string">'\n\nObject.defineProperty(exports, "__esModule", &#123;\n  value: true\n&#125;);\nexports.default = void 0;\n\nvar _default = function _default() &#123;\n  console.log("B");\n&#125;;\n\nexports.default = _default;\n\n//# sourceURL=webpack:///./src/moduleB.js?'</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/***/</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/******/</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>可以看到 moduleB 已经被打包进来了。</p><p>至此，我们最简单的 Babel 插件已经可以正常使用了。</p><p>感谢&amp;参考：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/27289600" target="_blank" rel="noopener">Babel 是如何读懂 JS 代码的</a></li><li><a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/README.md" target="_blank" rel="noopener">Babel Handbook</a></li><li><a href="https://github.com/babel/babel/blob/master/packages/babel-parser/ast/spec.md" target="_blank" rel="noopener">babel-parser/ast/spec.md</a></li><li><a href="http://www.alloyteam.com/2017/04/analysis-of-babel-babel-overview/" target="_blank" rel="noopener">剖析 Babel——Babel 总览</a></li><li><a href="https://octman.com/blog/2016-08-27-babel-notes/" target="_blank" rel="noopener">Babel 内部原理分析</a></li><li><a href="https://astexplorer.net/" target="_blank" rel="noopener">astexplorer</a></li><li><a href="https://juejin.im/post/5ab9f2f3f265da239b4174f0" target="_blank" rel="noopener">babel 插件入门-AST</a></li><li><a href="https://segmentfault.com/a/1190000013261724" target="_blank" rel="noopener">探索 babel 和 babel 插件是怎么工作的</a></li><li><a href="https://github.com/lcxfs1991/blog/issues/9" target="_blank" rel="noopener">babel 到底将代码转换成什么鸟样？</a></li><li><a href="https://juejin.im/entry/5af3a3f6518825670d731cea" target="_blank" rel="noopener">分析 Babel 转换 ES6 module 的原理</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前主流的前端框架在开发的时候都采用最新的 ES6+ 语法，大部分的向下兼容工作都交给了 Babel 来处理。通过引入 Babel 插件，我们可以大胆地使用最新或是正在起草中，甚至是根本不在标准中的 jsx 等语法，跟甚至是你自己胡诌的写法！&lt;/p&gt;&lt;p&gt;本文将带大家了解 Babel 是怎么工作的、Babel 插件是怎么工作又是怎么编写的，并写一个与 webpack 集成的最简单的 Babel 插件。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://daweilv.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端构建" scheme="https://daweilv.com/tags/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA/"/>
    
      <category term="build your own" scheme="https://daweilv.com/tags/build-your-own/"/>
    
      <category term="Babel" scheme="https://daweilv.com/tags/Babel/"/>
    
  </entry>
  
  <entry>
    <title>基于媒体查询和 rem 的响应式布局实践</title>
    <link href="https://daweilv.com/2018/07/12/responsive-layout-base-media-query-and-rem/"/>
    <id>https://daweilv.com/2018/07/12/responsive-layout-base-media-query-and-rem/</id>
    <published>2018-07-12T08:06:01.000Z</published>
    <updated>2019-09-17T02:18:09.638Z</updated>
    
    <content type="html"><![CDATA[<h3 id="媒体查询-media"><a href="#媒体查询-media" class="headerlink" title="媒体查询 @media"></a>媒体查询 @media</h3><p>我们开发一个网站的时候希望在手机端、iPad 端、PC 端都有良好的体验，CSS 给我们提供了一个强大的条件判断语法，可以根据设备的宽度来设置不同的样式，从而实现不同的设备应用不同的布局。</p><p>下图展示了利用 <code>@media</code> 实现的同一页面手机端 2 列、iPad 端 3 列、PC 端 4 列的布局。</p><a id="more"></a><blockquote><p><img src="./layout.jpeg" alt="layout"></p></blockquote><p>下面我们来分析下如何实现上述 Demo。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"grid"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="line">  <span class="hljs-attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.item</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="hljs-keyword">media</span> (min-width: <span class="hljs-number">576px</span>) &#123;</span><br><span class="line">  <span class="hljs-selector-class">.item</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">33.333%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="hljs-keyword">media</span> (min-width: <span class="hljs-number">1024px</span>) &#123;</span><br><span class="line">  <span class="hljs-selector-class">.item</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">25%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们根据设备的宽度把设备分为三个区间，分别为：</p><ul><li><code>小于576px</code> 移动端区间</li><li><code>576px~1024px</code> 平板区间</li><li><code>大于1024px</code> PC 端区间</li></ul><p>默认样式针对移动端编写，减少匹配规则，加快移动端的解析。当设备宽度大于 576px 时，就匹配到了 <code>@media (min-width: 576px)</code>，此时 <code>width: 33.333%;</code> 会将原来的 <code>50%</code> 覆盖掉，显示为 3 列。当设备宽度大于 1024px 时，就匹配到了 <code>@media (min-width: 1024px)</code>，此时 <code>width: 25%;</code> 进一步覆盖掉原来的 <code>33.333%</code>，显示为 4 列。</p><p>通过合理的布局 DOM 结构，可以让不同设备的浏览效果完全不同。配合 <code>flex</code> 布局的 <code>order</code> 属性，DOM 间的位置交换变得更加简单。</p><h3 id="REM"><a href="#REM" class="headerlink" title="REM"></a>REM</h3><p>我们使用三个断点解决了不同端的布局问题，但这只是第一步。我们现在还是用的 px 做单位，设计师给我们出的 iPhone6 的设计稿，一个按钮 80px 宽度，iPhone6 上可以这么写。iPhone5s 空间不足导致换行、iPhone6 Plus 留白怎么办？这时候就要召唤出我们的大杀器 rem 了。</p><p>rem 是一个根据 html 根元素 font-size 计算的相对单位。<code>元素实际尺寸 = 元素 rem 值 x html 的 font-size 值</code>。也就是说当 html 的 font-size 设置为 50px 时，2rem 的元素实际尺寸就是 100px。</p><p>我司设计师通常使用 2 倍的 iPhone6 作为设计稿。iPhone6 设计稿的宽度为<code>750px</code>，对应实际尺寸<code>350px</code>。为了方便换算，我们将 html 的 font-size 设置为 <code>50px</code>，实际尺寸 <code>100px = 2rem</code>。而这 <code>2rem</code> 正好等于设计稿上的 <code>200</code> 向左移动两位小数点，换算起来非常方便。</p><blockquote><p>你说的我都懂，但这跟 5s、6p 适配有什么关系呢？？</p></blockquote><p>当然有关系啦，我们可以让 html 的 font-size 基于 iPhone6 等比例缩放，这样就能实现对 5s、6p 的适配。来看一段代码：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> clientWidth = <span class="hljs-built_in">document</span>.documentElement.clientWidth;</span><br><span class="line"><span class="hljs-built_in">document</span>.documentElement.style.fontSize = (clientWidth / <span class="hljs-number">750</span>) * <span class="hljs-number">100</span> + <span class="hljs-string">"px"</span>;</span><br></pre></td></tr></table></figure><p>计算出当前设备的宽度基于 750 的尺寸，按比例换算成 px，实现不同尺寸的手机设置等比例的 html font-size。</p><p>我们看下实际效果图：</p><blockquote><p><img src="./layout2.jpeg" alt="layout2"></p></blockquote><h3 id="将-media-rem-结合起来"><a href="#将-media-rem-结合起来" class="headerlink" title="将 @media rem 结合起来"></a>将 @media rem 结合起来</h3><p>将之前讲的两点结合起来，代码如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> clientWidth = <span class="hljs-built_in">document</span>.documentElement.clientWidth;</span><br><span class="line"><span class="hljs-keyword">if</span> (clientWidth &lt; <span class="hljs-number">575</span>) &#123;</span><br><span class="line">  <span class="hljs-built_in">document</span>.documentElement.style.fontSize = (clientWidth / <span class="hljs-number">750</span>) * <span class="hljs-number">100</span> + <span class="hljs-string">"px"</span>;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (clientWidth &lt; <span class="hljs-number">1024</span>) &#123;</span><br><span class="line">  <span class="hljs-comment">// 竖版 iPad 的 2x 尺寸</span></span><br><span class="line">  <span class="hljs-built_in">document</span>.documentElement.style.fontSize = (clientWidth / <span class="hljs-number">1536</span>) * <span class="hljs-number">100</span> + <span class="hljs-string">"px"</span>;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">  <span class="hljs-built_in">document</span>.documentElement.style.fontSize = <span class="hljs-string">"50px"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终实现了：</p><ul><li><code>小于576px</code> 移动端区间，按 iPhone6 等比缩放，2 列布局</li><li><code>576px~1024px</code> 平板区间，按竖版 iPad 等比缩放，3 列布局</li><li><code>大于1024px</code> PC 端区间，不缩放。4 列布局</li></ul><p>总结，真实的项目中往往比这复杂的多，这个时候就需要把三端的设计稿拿过来仔细分析一下，哪些是可以抽象成一个 DOM 结构，清晰的 DOM 结构会让你的实现更加清晰。<br>附上本文的<a href="/demo/reponsive-layout">完整 Demo</a>，也就是一开始的截图。<br>另外更复杂的实现可以参考下我司官网 <a href="http://www.bstcine.com" target="_blank" rel="noopener">www.bstcine.com</a> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;媒体查询-media&quot;&gt;&lt;a href=&quot;#媒体查询-media&quot; class=&quot;headerlink&quot; title=&quot;媒体查询 @media&quot;&gt;&lt;/a&gt;媒体查询 @media&lt;/h3&gt;&lt;p&gt;我们开发一个网站的时候希望在手机端、iPad 端、PC 端都有良好的体验，CSS 给我们提供了一个强大的条件判断语法，可以根据设备的宽度来设置不同的样式，从而实现不同的设备应用不同的布局。&lt;/p&gt;&lt;p&gt;下图展示了利用 &lt;code&gt;@media&lt;/code&gt; 实现的同一页面手机端 2 列、iPad 端 3 列、PC 端 4 列的布局。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://daweilv.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="https://daweilv.com/tags/CSS/"/>
    
      <category term="rem" scheme="https://daweilv.com/tags/rem/"/>
    
      <category term="media-query" scheme="https://daweilv.com/tags/media-query/"/>
    
  </entry>
  
  <entry>
    <title>打开 Chrome 的隐藏功能</title>
    <link href="https://daweilv.com/2018/06/27/open-chrome-hidden-tool/"/>
    <id>https://daweilv.com/2018/06/27/open-chrome-hidden-tool/</id>
    <published>2018-06-27T08:51:27.000Z</published>
    <updated>2019-09-16T07:40:41.815Z</updated>
    
    <content type="html"><![CDATA[<p>我们有的时候想查看 Video/Audio 之类的原生控件里面有哪些 DOM 结构或者 CSS 是怎么写的，但是审核元素的时候却看不到里面的结构，那么有没有什么办法看到呢？Chrome 为我们提供了开关 Settings|Preferences -&gt; Elements -&gt; Show user agent shadow DOM，开启之后就能看到隐藏 DOM 了。</p><a id="more"></a><p><img src="settings1.jpeg" alt><br><img src="settings2.jpeg" alt><br><img src="showcase.jpeg" alt="DOM 结构"><br><img src="showcase3.jpeg" alt="CSS 样式"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们有的时候想查看 Video/Audio 之类的原生控件里面有哪些 DOM 结构或者 CSS 是怎么写的，但是审核元素的时候却看不到里面的结构，那么有没有什么办法看到呢？Chrome 为我们提供了开关 Settings|Preferences -&amp;gt; Elements -&amp;gt; Show user agent shadow DOM，开启之后就能看到隐藏 DOM 了。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://daweilv.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Chrome" scheme="https://daweilv.com/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>好用的 shell 命令合集</title>
    <link href="https://daweilv.com/2018/06/27/useful-shell-command/"/>
    <id>https://daweilv.com/2018/06/27/useful-shell-command/</id>
    <published>2018-06-27T06:08:44.000Z</published>
    <updated>2019-09-16T09:47:45.515Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 设置 proxy</span></span><br><span class="line"><span class="hljs-built_in">alias</span> proxy=<span class="hljs-string">'export all_proxy=socks5://127.0.0.1:1086'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 取消 proxy</span></span><br><span class="line"><span class="hljs-built_in">alias</span> unproxy=<span class="hljs-string">'unset all_proxy'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 显示当前 ip 地址</span></span><br><span class="line"><span class="hljs-built_in">alias</span> ip=<span class="hljs-string">'ifconfig en0|grep "inet .* netmask"|cut -d " " -f 2'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c
      
    
    </summary>
    
      <category term="DevOps" scheme="https://daweilv.com/categories/DevOps/"/>
    
    
      <category term="Shell" scheme="https://daweilv.com/tags/Shell/"/>
    
      <category term="Bash" scheme="https://daweilv.com/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title>免密码 SSH 登录 Linux</title>
    <link href="https://daweilv.com/2018/06/27/login-linux-without-pwd/"/>
    <id>https://daweilv.com/2018/06/27/login-linux-without-pwd/</id>
    <published>2018-06-27T05:52:30.000Z</published>
    <updated>2019-09-16T09:47:45.509Z</updated>
    
    <content type="html"><![CDATA[<p>由于工作的原因需要经常 SSH 登录服务器，每次登录服务器都要输入一次密码非常麻烦，还好 SSH 提供了免密码登录（公钥登录），设置好之后每次只需要 <code>ssh user@example.com</code> 回车就登录上去了。</p><a id="more"></a><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成密钥，一路回车，默认保存在 ~/.ssh/id_rsa 下</span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 上传公钥到目标服务器上</span><br><span class="line">ssh-copy-id user@example.com</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh user@example.com</span><br><span class="line"># 回车，咻，登录上了！</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于工作的原因需要经常 SSH 登录服务器，每次登录服务器都要输入一次密码非常麻烦，还好 SSH 提供了免密码登录（公钥登录），设置好之后每次只需要 &lt;code&gt;ssh user@example.com&lt;/code&gt; 回车就登录上去了。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://daweilv.com/categories/DevOps/"/>
    
    
      <category term="linux" scheme="https://daweilv.com/tags/linux/"/>
    
      <category term="ssh" scheme="https://daweilv.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Progressive Web App 开发指南</title>
    <link href="https://daweilv.com/2018/06/27/pwa-dev-guide/"/>
    <id>https://daweilv.com/2018/06/27/pwa-dev-guide/</id>
    <published>2018-06-27T02:04:41.000Z</published>
    <updated>2019-09-16T08:47:58.690Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>施工中</p></blockquote><h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><ol><li>Service Workers 目前还没有被授予访问 cookie 的能力，via<a href="https://github.com/WICG/cookie-store/issues/37" target="_blank" rel="noopener">https://github.com/WICG/cookie-store/issues/37</a>、<a href="https://github.com/w3c/ServiceWorker/issues/707" target="_blank" rel="noopener">https://github.com/w3c/ServiceWorker/issues/707</a>、<a href="https://github.com/w3c/ServiceWorker/issues/837" target="_blank" rel="noopener">https://github.com/w3c/ServiceWorker/issues/837</a>。所以通过 session 鉴权的页面可能会出现异常。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;施工中&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;坑点&quot;&gt;&lt;a href=&quot;#坑点&quot; class=&quot;headerlink&quot; title=&quot;坑点&quot;&gt;&lt;/a&gt;坑点&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;Service Workers 目前还没有被授予访问 coo
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://daweilv.com/tags/javascript/"/>
    
      <category term="PWA" scheme="https://daweilv.com/tags/PWA/"/>
    
      <category term="Service Worker" scheme="https://daweilv.com/tags/Service-Worker/"/>
    
  </entry>
  
  <entry>
    <title>为你的阿里云服务器 ECS 升级 https</title>
    <link href="https://daweilv.com/2018/06/22/update-your-ecs-to-https/"/>
    <id>https://daweilv.com/2018/06/22/update-your-ecs-to-https/</id>
    <published>2018-06-22T08:59:14.000Z</published>
    <updated>2019-09-18T07:23:28.150Z</updated>
    
    <content type="html"><![CDATA[<p>本文是<a href="https://dawei.lv/2018/06/22/setup-nodejs-online-server/" target="_blank" rel="noopener">从零搭建-Node-js-线上环境</a>的后续，因 https 比较独立，故单独写了一篇文章记录下。</p><p>阿里云现在提供了免费的 SSL 证书，申请过程略过，很简单，审核通过后下载证书文件。</p><a id="more"></a><p>在 /etc/nginx 下新建目录 cert，将证书 xxx.pem 和 xxx.key 上传到 /etc/nginx/cert 下，修改 <code>dev.example.com.conf</code>:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name dev.example.com;</span><br><span class="line">    access_log /var/log/nginx/dev.example.com.access.log;</span><br><span class="line">    ssl on; #开启SSL</span><br><span class="line">    ssl_certificate     cert/xxx.pem;    #证书文件</span><br><span class="line">    ssl_certificate_key cert/xxx.key;    #私钥文件</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://127.0.0.1:8888/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;        #监听80端口</span><br><span class="line">    server_name  dev.example.com; #监听的域名</span><br><span class="line">    return 301 https://dev.example.com$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># test 下配置有没有问题</span></span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 重新加载配置</span></span><br><span class="line">service nginx reload</span><br></pre></td></tr></table></figure><p>重新访问 <code>http://dev.example.com</code> 看看是不是已经跳转到 <code>https://dev.example.com</code> 了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是&lt;a href=&quot;https://dawei.lv/2018/06/22/setup-nodejs-online-server/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;从零搭建-Node-js-线上环境&lt;/a&gt;的后续，因 https 比较独立，故单独写了一篇文章记录下。&lt;/p&gt;&lt;p&gt;阿里云现在提供了免费的 SSL 证书，申请过程略过，很简单，审核通过后下载证书文件。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://daweilv.com/categories/DevOps/"/>
    
    
      <category term="ubuntu" scheme="https://daweilv.com/tags/ubuntu/"/>
    
      <category term="nginx" scheme="https://daweilv.com/tags/nginx/"/>
    
      <category term="https" scheme="https://daweilv.com/tags/https/"/>
    
  </entry>
  
</feed>
